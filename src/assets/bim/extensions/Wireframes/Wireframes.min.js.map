{"version":3,"sources":["webpack://Autodesk.Extensions.[name]/webpack/bootstrap","webpack://Autodesk.Extensions.[name]/./extensions/Wireframes/Wireframes.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","av","Autodesk","Viewing","WireframesExtension","viewer","options","groups","geometries","materials","lines","lightPreset","viewerLightPreset","showingSolidMaterials","showingLines","linesMaterial","THREE","LineBasicMaterial","color","Color","opacity","transparent","depthTest","depthWrite","solidMaterial","MeshPhongMaterial","specular","emissive","ambient","polygonOffset","polygonOffsetFactor","polygonOffsetUnits","packedNormals","onProgressUpdate","event","state","ProgressState","LOADING","this","createAndAddWireframes","matManager","impl","getMaterials","togglePolygonOffset","models","modelQueue","getModels","modelsCount","length","getData","instanceTree","group","createWireframes","model","push","activeStatus","addWireframes","setSolidMaterial","invalidate","addEventListener","PROGRESS_UPDATE_EVENT","revertSolidMaterials","revertWireframes","removeEventListener","prefs","setLightPreset","setLinesMaterial","showSolidMaterial","showLines","show","linesCount","visible","material","materialsCount","fragments","setMaterial","fragment","Extension","tree","getFragmentList","newGeometries","enumNodeChildren","getRootId","dbId","isNodeHidden","isNodeOff","enumNodeFragments","fragmentId","mesh","getVizmesh","geometry","is2d","isLines","cutplanes","getMaterial","getGeometry","geometryCount","find","world","Matrix4","getWorldMatrix","Group","newGeometriesCount","position","Vector3","quaternion","Quaternion","scale","Geometry","geometryVertices","vertices","srcWorld","srcGeometry","srcVertices","vb","srcIndices","ib","srcStride","vbstride","j","indexA","indexB","indexC","vertexA","vertexB","vertexC","line","Line","LinePieces","decompose","copy","add","groupsCount","sceneAfter","materialsLength","remove","theExtensionManager","registerExtension"],"mappings":"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","file":"Wireframes/Wireframes.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 284);\n","'use strict';\n\nconst av = Autodesk.Viewing;\n\n/**\n * Provides the ability of rendering the model in wireframe mode.\n * The method implemented is not very performant, so it's best to \n * avoid using it with large models.\n * \n * The extension id is: `Autodesk.Viewing.Wireframes`\n * \n * @example\n *   viewer.loadExtension('Autodesk.Viewing.Wireframes')\n * \n * @memberof Autodesk.Viewing.Extensions\n * @alias Autodesk.Viewing.Extensions.WireframesExtension\n * @see {@link Autodesk.Viewing.Extension} for common inherited methods.\n * @constructor\n */\nexport default class WireframesExtension extends av.Extension {\n\n    constructor(viewer, options) {\n        super(viewer, options);\n        \n        this.groups = [];\n        this.geometries = [];\n        this.materials = [];\n        this.lines = [];\n\n        this.lightPreset = 4; //\"Photo Booth\";\n        this.viewerLightPreset = 4;\n\n        this.showingSolidMaterials = true;\n        this.showingLines = true;\n\n        this.linesMaterial = new THREE.LineBasicMaterial({\n            color: new THREE.Color(0x00000000),\n            opacity: 0.03,\n            transparent: true,\n            depthTest: true,\n            depthWrite: false\n        });\n\n        this.solidMaterial = new THREE.MeshPhongMaterial({\n            color: 0xFFCFCFCF,\n            specular: 0x00000000,\n            emissive: 0xFFCFCFCF,\n            ambient: 0,\n            opacity: 1.0,\n            transparent: false,\n            polygonOffset: true,\n            polygonOffsetFactor: 1.0,\n            polygonOffsetUnits: 5\n        });\n        this.solidMaterial.packedNormals = true;\n        this.name = 'wireframes';\n        this.onProgressUpdate = this.onProgressUpdate.bind(this);\n    }\n\n    onProgressUpdate(event) {\n        if (event.state === av.ProgressState.LOADING) {\n\n          // Add wireframes for newly loaded fragments.\n          this.createAndAddWireframes();\n        }\n    };\n\n    togglePolygonOffset() {\n        // Functionality available in Viewer 2.15 and up, to make wireframe lines\n        // look better.\n        // However, wirelines may still work (though not as good) when the function is not present.\n        var matManager = this.viewer.impl.getMaterials();\n        if (matManager && matManager.togglePolygonOffset) {\n            matManager.togglePolygonOffset(true, 1.0, 5.0);\n        }\n    };\n\n    // Create and add wireframe geometry.\n    createAndAddWireframes() {\n\n        var viewer = this.viewer;\n        var models = viewer.impl.modelQueue().getModels();\n        var modelsCount = models.length;\n\n        for (var i = 0; i < modelsCount; ++i) {\n\n            if(!models[i].getData().instanceTree) {\n                continue;\n            }\n\n            // Create group with all lines obtained for the model.\n            var group = createWireframes(models[i], this.geometries, this.lines, this.materials, this.linesMaterial);\n            group.model = models[i];\n            this.groups.push(group);\n\n            // Set solid material to new fragments only when tool is activated.\n            if (this.activeStatus) {\n                addWireframes(this.viewer, this.groups);\n                this.setSolidMaterial(this.solidMaterial);\n            }\n\n        }\n\n        this.togglePolygonOffset();\n        viewer.impl.invalidate(true, true, true);\n    };\n\n    load() {\n        this.createAndAddWireframes();\n\n        // Keep adding wireframes if model is still loading.\n        this.viewer.addEventListener(av.PROGRESS_UPDATE_EVENT, this.onProgressUpdate);\n\n        // Enable line offset.\n        this.togglePolygonOffset();\n\n        return true;\n    };\n\n    unload() {\n\n        this.activeStatus = false;\n\n        revertSolidMaterials(this.viewer, this.materials);\n        revertWireframes(this.viewer, this.groups);\n\n        this.viewer.removeEventListener(av.PROGRESS_UPDATE_EVENT, this.onProgressUpdate);\n\n        this.geometries = [];\n        this.materials = [];\n        this.lines = [];\n        this.groups = [];\n\n        return true;\n    };\n\n    /**\n     * Enters wireframe mode.\n     * \n     * @memberof Autodesk.Viewing.Extensions.WireframesExtension\n     * @alias Autodesk.Viewing.Extensions.WireframesExtension#activate\n     */\n    activate() {\n\n        this.activeStatus = true;\n\n        this.viewerLightPreset = this.viewer.prefs.get('lightPreset');\n        this.viewer.setLightPreset(this.lightPreset);\n\n        this.setSolidMaterial(this.solidMaterial);\n        this.setLinesMaterial(this.linesMaterial);\n\n        addWireframes(this.viewer, this.groups);\n\n        this.showSolidMaterial(this.showingSolidMaterials);\n        this.showLines(this.showingLines);\n\n        return true;\n    };\n\n    /**\n     * Exits wireframe mode.\n     * \n     * @memberof Autodesk.Viewing.Extensions.WireframesExtension\n     * @alias Autodesk.Viewing.Extensions.WireframesExtension#deactivate\n     */\n    deactivate() {\n\n        this.activeStatus = false;\n        this.viewer.setLightPreset(this.viewerLightPreset);\n        revertWireframes(this.viewer, this.groups);\n        revertSolidMaterials(this.viewer, this.materials);\n        return true;\n    };\n\n    /**\n     * Whether to replace the standard materials with a solid one, or not.\n     * \n     * @param {bool} show\n     * \n     * @memberof Autodesk.Viewing.Extensions.WireframesExtension\n     * @alias Autodesk.Viewing.Extensions.WireframesExtension#showSolidMaterial\n     */\n    showSolidMaterial(show) {\n\n        this.showingSolidMaterials = show;\n\n        if(!this.activeStatus) {\n            return;\n        }\n\n        if (this.showingSolidMaterials) {\n            this.setSolidMaterial(this.solidMaterial);\n        } else {\n            revertSolidMaterials(this.viewer, this.materials);\n        }\n    };\n\n    /**\n     * Whether to render line edges or not.\n     * \n     * @param {bool} show\n     * \n     * @memberof Autodesk.Viewing.Extensions.WireframesExtension\n     * @alias Autodesk.Viewing.Extensions.WireframesExtension#showLines\n     */\n    showLines(show) {\n\n        this.showingLines = show;\n\n        if(!this.activeStatus) {\n            return;\n        }\n\n        var lines = this.lines;\n        var linesCount = lines.length;\n\n        for (var i = 0; i < linesCount; ++i) {\n\n            var line = lines[i];\n            line.visible = show;\n        }\n\n        this.viewer.impl.invalidate(true, true, true);\n    };\n\n    /**\n     * Replaces the solid material.\n     * \n     * @param {THREE.Material} material\n     * \n     * @see {@link Autodesk.Viewing.Extensions.WireframesExtension#showSolidMaterial}\n     * @memberof Autodesk.Viewing.Extensions.WireframesExtension\n     * @alias Autodesk.Viewing.Extensions.WireframesExtension#setSolidMaterial\n     */\n    setSolidMaterial(material) {\n\n        this.solidMaterial = material;\n\n        // Replace all fragments materials if extension active and showing solid materials.\n        if(!this.activeStatus || !this.showingSolidMaterials) {\n            return;\n        }\n\n        var materials = this.materials;\n        var materialsCount = materials.length;\n\n        for (var i = 0; i < materialsCount; ++i) {\n\n            var material = materials[i];\n            material.fragments.setMaterial(material.fragment, this.solidMaterial);\n        }\n\n        this.viewer.impl.invalidate(true, true, true);\n    };\n\n    /**\n     * Replaces the line material.\n     * \n     * @param {THREE.Material} material\n     * \n     * @see {@link Autodesk.Viewing.Extensions.WireframesExtension#showLines}\n     * @memberof Autodesk.Viewing.Extensions.WireframesExtension\n     * @alias Autodesk.Viewing.Extensions.WireframesExtension#setLinesMaterial\n     */\n    setLinesMaterial(material) {\n\n        this.linesMaterial = material;\n\n        // Replace all lines materials if extension is active and showing lines.\n        if(!this.activeStatus || !this.showingLines) {\n            return;\n        }\n\n        var lines = this.lines;\n        var linesCount = lines.length;\n\n        for (var i = 0; i < linesCount; ++i) {\n\n            var line = lines[i];\n            line.material = this.linesMaterial;\n        }\n\n        this.viewer.impl.invalidate(true, true, true);\n    };\n\n    /**\n     * Specifies the light preset to use when wireframe mode is activated.\n     * \n     * @param {string} name - the name of the light preset\n     * \n     * @memberof Autodesk.Viewing.Extensions.WireframesExtension\n     * @alias Autodesk.Viewing.Extensions.WireframesExtension#setLightPreset\n     */\n    setLightPreset(name) {\n\n        this.lightPreset = name;\n        if (this.activeStatus) {\n            this.viewer.setLightPreset(name);\n        }\n    };\n\n}\n\n\nfunction createWireframes(model, geometries, lines, materials, linesMaterial) {\n\n    // Get Meshes in the model.\n    var tree = model.getData().instanceTree;\n    var fragments = model.getFragmentList();\n    var newGeometries = [];\n\n    tree.enumNodeChildren(model.getRootId(), function(dbId) {\n\n        if (tree.isNodeHidden(dbId) || tree.isNodeOff(dbId)) {\n            return;\n        }\n\n        //All fragments that belong to the same node make part of the\n        //same object so we have to accumulate all their intersections into one list\n        tree.enumNodeFragments(dbId, function(fragmentId) {\n\n            var mesh = fragments.getVizmesh(fragmentId);\n\n            if (!mesh.geometry) {\n                return;\n            }\n\n            if (mesh.geometry.is2d || mesh.geometry.isLines) {\n                return;\n            }\n\n            if (!mesh.material.cutplanes) {\n                return;\n            }\n\n            // Save materials to restore later.\n            materials.push({fragment: fragmentId, fragments: fragments, material: fragments.getMaterial(fragmentId)});\n\n            // Add geometry if not already present.\n            var geometry = fragments.getGeometry(fragmentId);\n            if(!find(geometry, fragmentId, geometries)) {\n\n                var world = new THREE.Matrix4();\n                fragments.getWorldMatrix(fragmentId, world);\n                newGeometries.push({geometry: geometry, world: world, fragment: fragmentId});\n            }\n        }.bind(this), false);\n    }, true);\n\n    // Create wire lines.\n    var group = new THREE.Group();\n    var newGeometriesCount = newGeometries.length;\n    var position = new THREE.Vector3(), quaternion = new THREE.Quaternion(), scale = new THREE.Vector3();\n\n    for (var i = 0; i < newGeometriesCount; ++i) {\n\n        var geometry = new THREE.Geometry();\n        var geometryVertices = geometry.vertices;\n\n        var srcWorld = newGeometries[i].world;\n        var srcGeometry = newGeometries[i].geometry;\n\n        var srcVertices = srcGeometry.vb;\n        var srcIndices = srcGeometry.ib;\n        var srcStride = srcGeometry.vbstride;\n\n        for (var j = 0; j < srcIndices.length;) {\n\n            var indexA = srcIndices[j++] * srcStride;\n            var indexB = srcIndices[j++] * srcStride;\n            var indexC = srcIndices[j++] * srcStride;\n\n            var vertexA = new THREE.Vector3(srcVertices[indexA++], srcVertices[indexA++], srcVertices[indexA]);\n            var vertexB = new THREE.Vector3(srcVertices[indexB++], srcVertices[indexB++], srcVertices[indexB]);\n            var vertexC = new THREE.Vector3(srcVertices[indexC++], srcVertices[indexC++], srcVertices[indexC]);\n\n            geometryVertices.push(vertexA);\n            geometryVertices.push(vertexB);\n\n            geometryVertices.push(vertexB);\n            geometryVertices.push(vertexC);\n\n            geometryVertices.push(vertexC);\n            geometryVertices.push(vertexA);\n        }\n\n        var line = new THREE.Line(geometry, linesMaterial, THREE.LinePieces);\n\n        srcWorld.decompose(position, quaternion, scale);\n        line.position.copy(position);\n        line.quaternion.copy(quaternion);\n        line.scale.copy(scale);\n        lines.push(line);\n\n        group.add(line);\n        geometries.push(newGeometries[i]);\n    }\n\n    return group;\n}\n\nfunction addWireframes(viewer, groups) {\n\n    var groupsCount = groups.length;\n    for (var i = 0; i < groupsCount; ++i) {\n\n        viewer.impl.sceneAfter.add(groups[i]);\n    }\n    viewer.impl.invalidate(true, true, true);\n}\n\nfunction revertSolidMaterials(viewer, materials) {\n\n    var materialsLength = materials.length;\n    for (var i = 0; i < materialsLength; ++i) {\n\n        var material = materials[i];\n        material.fragments.setMaterial(material.fragment, material.material);\n    }\n    viewer.impl.invalidate(true, true, true);\n}\n\nfunction revertWireframes(viewer, groups) {\n\n    var groupsCount = groups.length;\n    for (var i = 0; i < groupsCount; ++i) {\n\n        viewer.impl.sceneAfter.remove(groups[i]);\n    }\n    viewer.impl.invalidate(true, true, true);\n}\n\nfunction find(geometry, fragment, geometries) {\n\n    var geometryCount = geometries.length;\n    for (var i = 0; i < geometryCount; ++i) {\n\n        if (geometries[i].geometry === geometry && geometries[i].fragment === fragment) {\n            return geometries[i];\n        }\n    }\n\n    return null;\n}\n\n\nAutodesk.Viewing.theExtensionManager.registerExtension('Autodesk.Viewing.Wireframes', WireframesExtension);"],"sourceRoot":""}