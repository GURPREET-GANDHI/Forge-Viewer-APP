{"version":3,"sources":["webpack://Autodesk.Extensions.[name]/webpack/bootstrap","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-line-line.js","webpack://Autodesk.Extensions.[name]/(webpack)/buildin/global.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/complex-polygon.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/poly2tri.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/index.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/interval-tree.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/edge-set.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/dcel.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-box-plane.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-mesh-plane.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/point-list.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/quad-tree.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/contour-set.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-plane-segment.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/fuzzy-math.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-line-box.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-box-box.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-triangle-plane.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ABS","x","Math","abs","EPS","TOL","ONE_INTERSECTION","OVERLAP","pointOnLine","y","e","checkInsideSegment","precisionDistance","outPt","length","dot","v1","dx","dy","u","length2","lx","ly","len2","sqrt","segmentsIntersect","e1","e2","denom","numera","numerb","res","status","p3_seg1","p4_seg1","v2","push","p1_seg2","p2_seg2","parallelLinesOverlap","mua","da","db","g","this","Function","window","avp","Autodesk","Viewing","Private","logger","ComplexPolygon","uniquePoints","customInsidechecker","bbox","pts","contours","customInsideChecker","indices","cntr","yflag0","yflag1","vtx0X","vtx0Y","vtx1X","vtx1Y","inside_flag","j","jEnd","inside","pointInContour","triangulateInternal","message","indexOf","triangulationFailed","edges","len","k","p1","p2","it","IntervalTree","build","wantJitter","_pts","sz","size","offsetx","min","offsety","scale","pts2","iEnd","_triidx","copyPoints","random","jitterPoints","sweepCtx","lmv_poly2tri","points_","isOpen","edge","Array","initEdges","triangulate","processResult","createPointInPolygonChecker","tris","map_","tpts","p0","i0","i1","i2","filterFace","cx","cy","pointInPolygon","e1x","e1y","e2x","ex1","ey1","ex2","ey2","cachedEdges","x1","y1","x2","y2","etmp","precision","xsect","pt","sort","a","b","shift","pop","packNormals","polygonMesh","bg","THREE","BufferGeometry","pos","Float32Array","addAttribute","BufferAttribute","normal","Uint16Array","pnx","PI","pny","attributes","bytesPerItem","normalize","index","set","streamingDraw","streamingIndex","thickness","extrudedMesh","undefined","vb","iblines","vbase","inds","tmp","Vector3","Box3","expandByPoint","z","vbp","vbi","vbili","mdata","mesh","vbstride","vblayout","position","offset","itemSize","boundingBox","boundingSphere","center","radius","BufferGeometryUtils","meshToGeometry","geometry","f","require","Error","code","1","2","AdvancingFront","head","tail","head_","tail_","search_node_","setHead","node","setTail","search","setSearch","findSearchNode","locateNode","prev","next","locatePoint","point","px","nx","Node","triangle","3","condition","4","xy","Point","_p2t_edge_list","toString","toStringBase","toJSON","clone","set_zero","negate","add","sub","mul","equals","cross","compare","cmp","5","PointError","points","constructor","6","global","previousPoly2tri","poly2tri","noConflict","VERSION","version","Triangle","SweepContext","sweep","Triangulate","self","7","assert","utils","EPSILON","Orientation","orient2d","inScanArea","isAngleObtuse","pointEvent","tcx","new_node","markNeighbor","addToMap","legalize","mapTriangleToNodes","newFrontTriangle","fill","ax","ay","isBasinAngleRight","CCW","basin","left_node","bottom_node","right_node","width","left_highest","fillBasinReq","height","isShallow","CW","fillBasin","fillAdvancingFront","edgeEventByEdge","edge_event","constrained_edge","right","q","isEdgeSideOfTriangle","fillRightBelowEdgeEvent","fillRightAboveEdgeEvent","fillLeftBelowEdgeEvent","fillLeftAboveEdgeEvent","fillEdgeEvent","edgeEventByPoints","ep","eq","pointCCW","o1","COLLINEAR","pointCW","o2","neighborCCW","neighborCW","flipEdgeEvent","edgeIndex","markConstrainedEdgeByIndex","getNeighbor","markConstrainedEdgeByPoints","delaunay_edge","ot","getPoint","op","oppositePoint","oi","inCircle","rotateTrianglePair","not_legalized","pa","pb","pc","pd","adx","ady","bdx","bdy","oabd","cdx","cdy","ocad","n1","n2","n3","n4","ce1","ce2","ce3","ce4","de1","de2","de3","de4","getConstrainedEdgeCCW","getConstrainedEdgeCW","getDelaunayEdgeCCW","getDelaunayEdgeCW","setDelaunayEdgeCCW","setDelaunayEdgeCW","setConstrainedEdgeCCW","setConstrainedEdgeCW","clearNeighbors","fillRightConcaveEdgeEvent","fillRightConvexEdgeEvent","fillLeftConcaveEdgeEvent","fillLeftConvexEdgeEvent","neighborAcross","getConstrainedEdgeAcross","edge_index","clearDelaunayEdges","nextFlipTriangle","flipScanEdgeEvent","flip_triangle","newP","nextFlipPoint","o2d","initTriangulation","createAdvancingFront","pointCount","sweepPoints","front","meshClean","finalizationPolygon","8","Edge","Basin","clear","EdgeEvent","contour","options","triangles_","cloneArrays","slice","edge_list","pmin_","pmax_","front_","af_head_","af_middle_","af_tail_","addHole","polyline","AddHole","addHoles","holes","concat","apply","addPoint","AddPoint","addPoints","getBoundingBox","max","getTriangles","GetTriangles","getMap","xmax","xmin","ymax","ymin","middle","removeNode","removeFromMap","map","splice","triangles","isInterior","setInterior","9","neighbors_","interior_","p2s","GetPoint","getPoints","containsPoint","containsEdge","containsPoints","interior","markNeighborPointers","ce","cw","opoint","npoint","markConstrainedEdgeByEdge","10","val","11","define","av","avecg","AutodeskNamespace","_export","prop","CompGeomExtension","viewer","Extension","theExtensionManager","registerExtension","IntervalNode","Box2","left","node_edges","pipResult","splitNode","split","ne","remaining_node_edges","tmpPt","Vector2","p1y","p2y","boxPtr","root","edge_indices","copy","pointInPolygonRec","nl","nr","EdgeSet","precisionTolerance","verts","UniquePointList","polygon","py","findOrAddPoint","id","getPointIndex","edgeSet","sanitizedEdges","edge_table","cur_cntr","warn","sfrom","cur","parseInt","cur_segs","toPt","openCntrs","didSomething","cntr_edge_table","start","end","entry","toerase","c1","c2","reverse","removePt","dx1","dy1","dx2","dy2","len1","Vertex","dbIds","dbIdsChanged","de","idx","v","getOppositeVertex","removeEdge","angle1","angle","angle2","flagFwd","flagRev","_canTraverse","error","isDegenerate","idxNext","eNext","DirectedEdge","swap","atan2","isZero","isEqual","minx","miny","maxx","maxy","dbIdsCached","idv1","idv2","DCEL","boxSize","quadTreeEdges","QuadTree","nextEdgeId","getDbIds","paramAlong","removeDirectedEdge","addDirectedEdge","cb","enumNearItems","skipSplitting","_addVertex","findEdgeTo","addedEdge","addEdge","sourcePts","addItem","myInts","otherInts","_enumNearEdges","ints","splitEdge","dirty","deleteItem","startVertex","endVertex","removeList","forEach","angleDelta","vOther1","vOther2","cleanupFlatEdges","compact","oldid","outerPerimeter","closedAreas","cs","cs2","containsPointFrom","isHole","addContourSet","holeProcessFlag","filteredNonHoles","allAreas","openAreas","cmap","hash","removed","values","csAll","ContourSet","_detectHolesNonZero","useEvenOddFill","_compactLists","sortEdges","polygons","openPolygons","findUntraversedEdge","vNext","findNextCCWEdge","addContour","area","_detectHolesEvenOdd","stitchContours","v1Tmp","v2Tmp","deTmp","sid","eid","removeDanglingPolyline","enumInBox","dNear","Infinity","vNear","ptNearest","xBoxPlane","plane","box","distanceToPoint","sign","d2","VertexEnumerator","mi","Matrix4","pi","Plane","xMeshPlane","intersects","baseIndex","matrixWorld","getInverse","applyMatrix4","enumMeshTriangles","vA","vB","vC","xTrianglePlane","fragId","makePlaneBasis","sceneUp","axis","tx","ty","planeBasis","elements","constant","convertToPlaneCoords","edges3d","VertexConstructor","useQuadTree","precisionToleranceSq","snapBaseX","snapBaseY","xymap","Map","quadTreeVerts","vertexConstructor","minDist","mx","dist","dbId","tmpPoint","extraDistance","itemHandler","items","children","itemCount","overlapCount","whichChild","intersectsItem","subdivide","deleteCount","xBoxBox","intersectsBox","xLineBox","xs","ys","midx","midy","findSplitPoint","keepItems","item","polygonArea","needsClose","total","areas","allPoints","allPointsMap","skipZeroAreas","perimeterMem","cset","ptlist","all","vids","JSON","stringify","toPolygonMesh","toExtrudedMesh","xPlaneSegment","pt0","pt1","res1","res2","direction","subVectors","denominator","multiplyScalar","INSIDE","LEFT","RIGHT","BOTTOM","TOP","ComputeOutCode","x0","y0","outcode0","outcode1","accept","outcodeOut","minx1","miny1","maxx1","maxy1","minx2","miny2","maxx2","maxy2","pt2","id1From","id1To","id2From","id2To","meshId","d0","d1","tmp1","tmp2","i1From","i1To","i2From","i2To","s0","s1","s2","numInts","distanceTo"],"mappings":"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","file":"CompGeom/CompGeom.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 309);\n","\r\nimport { TOL } from  \"./fuzzy-math\";\r\n\r\nfunction ABS(x) {\r\n    return Math.abs(x);\r\n}\r\n\r\nconst EPS = TOL;\r\n\r\nexport const ONE_INTERSECTION = 4;\r\nexport const OVERLAP = 5;\r\n\r\n\r\n//Returns true if the given point lies on and inside the given line segment\r\nexport function pointOnLine(x, y, e, checkInsideSegment, precisionDistance, outPt) {\r\n\r\n    if (e.length < EPS) {\r\n        return false;\r\n    }\r\n\r\n    let dot = (x - e.v1.x) * e.dx + (y - e.v1.y) * e.dy;\r\n\r\n    if (!precisionDistance)\r\n        precisionDistance = EPS * e.length;\r\n\r\n    let u = dot / e.length2;\r\n        \r\n    if (checkInsideSegment) {\r\n        if (u * e.length < -precisionDistance || u * e.length > e.length + precisionDistance)\r\n            return false;\r\n    }\r\n\r\n    let lx = e.v1.x + u * e.dx;\r\n    let ly = e.v1.y + u * e.dy;\r\n    \r\n    let len2 = (lx - x) * (lx - x) + (ly - y) * (ly - y);\r\n\r\n    if (outPt) {\r\n        outPt.x = lx;\r\n        outPt.y = ly;\r\n        outPt.d = Math.sqrt(len2);\r\n        outPt.u = u;\r\n    }\r\n    \r\n    if (len2 < precisionDistance * precisionDistance)\r\n        return true;\r\n\r\n    return false;\r\n}\r\n\r\n\r\nfunction parallelLinesOverlap(e1, e2, precisionDistance) {\r\n\r\n    //Check of the segments are parallel but not on the same infinite line\r\n    if (!pointOnLine(e2.v1.x, e2.v1.y, e1, false, precisionDistance)) {\r\n        return null;\r\n    }\r\n\r\n    let res = {\r\n        status: OVERLAP,\r\n        e1: [],\r\n        e2: []\r\n    };\r\n\r\n    //They are on the same line. Find overlap points.\r\n    //TODO: There is probably a more efficient way to do this\r\n    let p3_seg1 = pointOnLine(e2.v1.x, e2.v1.y, e1, true, precisionDistance);\r\n    let p4_seg1 = pointOnLine(e2.v2.x, e2.v2.y, e1, true, precisionDistance);\r\n\r\n    //If both points of the second segment are inside the first\r\n    //then the reverse cannot be true...\r\n    if (p3_seg1 && p4_seg1) {\r\n        res.e1.push(e2.v1.x, e2.v1.y, e2.v2.x, e2.v2.y);\r\n        return res;\r\n    }\r\n\r\n    let p1_seg2 = pointOnLine(e1.v1.x, e1.v1.y, e2, true, precisionDistance);\r\n    let p2_seg2 = pointOnLine(e1.v2.x, e1.v2.y, e2, true, precisionDistance);\r\n\r\n    if (p3_seg1)\r\n        res.e1.push(e2.v1.x, e2.v1.y);\r\n    if (p4_seg1)\r\n        res.e1.push(e2.v2.x, e2.v2.y);\r\n    if (p1_seg2)\r\n        res.e2.push(e1.v1.x, e1.v1.y);\r\n    if (p2_seg2)\r\n        res.e2.push(e1.v2.x, e1.v2.y);\r\n\r\n    return res;\r\n}\r\n\r\n\r\n/*\r\n   Determine the intersection point of two line segments\r\n   Modified source from here:\r\n   http://www.paulbourke.net/geometry/pointlineplane/\r\n*/\r\nexport function segmentsIntersect(e1, e2, precisionDistance)\r\n{\r\n    let denom  = e2.dy * e1.dx - e2.dx * e1.dy;\r\n    let numera = e2.dx * (e1.v1.y - e2.v1.y) - e2.dy * (e1.v1.x - e2.v1.x);\r\n    let numerb = e1.dx * (e1.v1.y - e2.v1.y) - e1.dy * (e1.v1.x - e2.v1.x);\r\n\r\n    /* Are the lines coincident? */\r\n    if (ABS(numera) < EPS && ABS(numerb) < EPS && ABS(denom) < EPS) {\r\n        return null;\r\n    }\r\n\r\n    /* Are the lines parallel */\r\n    if (ABS(denom) < EPS) {\r\n        /* check for overlap */\r\n        return parallelLinesOverlap(e1, e2, precisionDistance);\r\n    }\r\n\r\n    /* Is the intersection along the segments */\r\n    let mua = numera / denom;\r\n    let da = mua * e1.length;\r\n    if (da < -precisionDistance || da > e1.length + precisionDistance) {\r\n        return null;\r\n    }\r\n\r\n    let mub = numerb / denom;\r\n    let db = mub * e2.length;\r\n    if (db < -precisionDistance || db > e2.length + precisionDistance) {\r\n        return null;\r\n    }\r\n\r\n    let x = e1.v1.x + mua * e1.dx;\r\n    let y = e1.v1.y + mua * e1.dy;\r\n\r\n    return {\r\n        status: ONE_INTERSECTION,\r\n        e1: [x, y],\r\n        e2: [x, y]\r\n    };\r\n}","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","import * as lmv_poly2tri from \"./poly2tri\";\nimport { IntervalTree } from \"./interval-tree\";\nimport { segmentsIntersect, ONE_INTERSECTION, OVERLAP } from \"./x-line-line\";\n\nconst avp = Autodesk.Viewing.Private;\nconst logger = avp.logger;\n\nfunction jitterPoints(pts) {\n\n    for (let i=0, iEnd=pts.length; i<iEnd; i++) {\n        pts[i].x += (Math.random()-0.5) * 1e-9;\n        pts[i].y += (Math.random()-0.5) * 1e-9;\n    }\n\n}\n\nfunction copyPoints(pts, bbox) {\n\n    //Moving poiints to be centered on the origin\n    //seems to improve triangulation success rate, or\n    //at least avoids some bugs in poly2yti\n\n    let sz = bbox.size();\n    let offsetx = bbox.min.x + sz.x * 0.5;\n    let offsety = bbox.min.y + sz.y * 0.5;\n    let scale = 2.0 / sz.length();\n\n    let pts2 = [];\n\n    for (let i=0, iEnd=pts.length; i<iEnd; i++) {\n        pts2.push({\n            x: (pts[i].x - offsetx) * scale,// + (Math.random()-0.5) * 1e-9,\n            y: (pts[i].y - offsety) * scale,// + (Math.random()-0.5) * 1e-9,\n            _triidx: i+1\n        });\n    }\n\n    return pts2;\n\n}\n\n\n//Represents a polygon with holes, and provides triangulation and mesh conversion utilities\nexport class ComplexPolygon {\n\n    constructor(uniquePoints, customInsidechecker, bbox) {\n        this.pts = uniquePoints;\n        this.contours = [];\n        this.customInsideChecker = customInsidechecker;\n        this.bbox = bbox;\n    }\n\n    addContour(indices) {\n        this.contours.push(indices);\n    }\n\n    pointInContour(x, y, cntr) {\n        var yflag0, yflag1;\n        var vtx0X, vtx0Y, vtx1X, vtx1Y;\n\n        var inside_flag = false;\n\n        var pts = this.pts;\n\n        // get the last point in the polygon\n        vtx0X = pts[cntr[cntr.length-1]].x;\n        vtx0Y = pts[cntr[cntr.length-1]].y;\n\n        // get test bit for above/below X axis\n        yflag0 = (vtx0Y >= y);\n\n        for (var j= 0, jEnd=cntr.length; j<jEnd; ++j)\n        {\n            vtx1X = pts[cntr[j]].x;\n            vtx1Y = pts[cntr[j]].y;\n\n            yflag1 = (vtx1Y >= y);\n\n            // Check if endpoints straddle (are on opposite sides) of X axis\n            // (i.e. the Y's differ); if so, +X ray could intersect this edge.\n            // The old test also checked whether the endpoints are both to the\n            // right or to the left of the test point.  However, given the faster\n            // intersection point computation used below, this test was found to\n            // be a break-even proposition for most polygons and a loser for\n            // triangles (where 50% or more of the edges which survive this test\n            // will cross quadrants and so have to have the X intersection computed\n            // anyway).  I credit Joseph Samosky with inspiring me to try dropping\n            // the \"both left or both right\" part of my code.\n            if (yflag0 != yflag1)\n            {\n                // Check intersection of pgon segment with +X ray.\n                // Note if >= point's X; if so, the ray hits it.\n                // The division operation is avoided for the \">=\" test by checking\n                // the sign of the first vertex wrto the test point; idea inspired\n                // by Joseph Samosky's and Mark Haigh-Hutchinson's different\n                // polygon inclusion tests.\n                if (((vtx1Y-y)*(vtx0X-vtx1X) >=\n                        (vtx1X-x)*(vtx0Y-vtx1Y)) == yflag1)\n                {\n                    inside_flag = !inside_flag;\n                }\n            }\n\n            // move to the next pair of vertices, retaining info as possible\n            yflag0 = yflag1;\n            vtx0X = vtx1X;\n            vtx0Y = vtx1Y;\n        }\n\n        return inside_flag;\n    }\n\n\n    pointInPolygon(x, y) {\n        var inside = false;\n\n        for (var i=0; i<this.contours.length; i++) {\n\n            if (this.pointInContour(x, y, this.contours[i]))\n                inside = !inside;\n        }\n\n        return inside;\n    };\n\n    triangulate() {\n        try {\n            this.triangulateInternal();\n        } catch (e) {\n\n            if (e.message.indexOf(\"Collinear not supported!\") !== -1) {\n                try {\n                    this.triangulateInternal(true);\n                    //logger.log(\"Triangulation retry success.\");\n                } catch (e) {\n                    //logger.warn(\"Triangulation retry failed\", e);\n                    this.triangulationFailed = true;\n                }\n            } else {\n                //logger.warn(\"Triangulation failed\", e);\n                this.triangulationFailed = true;\n            }\n        }\n    }\n\n    createPointInPolygonChecker() {\n\n        let edges = [];\n\n        for (let i=0; i<this.contours.length; i++) {\n            let cntr = this.contours[i];\n\n            var len = cntr.length;\n            for (let k=0; k<len-1; k++) {\n                let e = {\n                    p1: cntr[k],\n                    p2: cntr[k+1]\n                };\n                edges.push(e);\n            }\n        }\n\n        let it = new IntervalTree(this.pts, edges, this.bbox);\n        it.build();\n        this.customInsideChecker = it;\n    }\n\n    triangulateInternal(wantJitter) {\n\n        if (!this.contours.length) {\n            this.triangulationFailed = true;\n            this.indices = null;\n            return;\n        }\n\n        this.indices = [];\n\n        var _pts = copyPoints(this.pts, this.bbox);\n\n        if (wantJitter) {\n            jitterPoints(_pts);\n        }\n\n        var sweepCtx = new lmv_poly2tri.SweepContext([]);\n\n        sweepCtx.points_  = _pts;\n\n        for (let i=0; i<this.contours.length; i++) {\n            let cntr = this.contours[i];\n\n            //Contour is not closed\n            var isOpen = (cntr[0] !== cntr[cntr.length-1]);\n\n            //if (isOpen)\n            //    continue;\n\n            var len = isOpen ? cntr.length : cntr.length - 1;\n            var edge = new Array(len);\n            for (var k=0; k<len; k++) {\n                edge[k] = _pts[cntr[k]];\n            }\n\n            sweepCtx.initEdges(edge, isOpen);\n        }\n\n        sweepCtx.triangulate();\n\n        this.processResult(sweepCtx);\n\n        this.triangulationFailed = !this.indices || !this.indices.length;\n\n    }\n\n    processResult(sweepCtx) {\n\n        //If the polygon has a lot of vertices, create\n        //an acceleration structure for point-in-polygon checks\n        //so we can filter the triangles faster.\n        if (this.pts.length > 10 && !this.customInsideChecker)\n            this.createPointInPolygonChecker();\n\n        let tris = sweepCtx.map_;\n        for (var i=0; i<tris.length; i++) {\n            var tpts = tris[i].points_;\n            var p0 = tpts[0];\n            var p1 = tpts[1];\n            var p2 = tpts[2];\n\n            var i0 = p0._triidx;\n            var i1 = p1._triidx;\n            var i2 = p2._triidx;\n\n            if (i0 && i1 && i2)\n                this.filterFace(i0-1, i1-1, i2-1);\n\n        }\n    };\n\n\n    filterFace(i0, i1, i2) {\n\n        var p0 = this.pts[i0];\n        var p1 = this.pts[i1];\n        var p2 = this.pts[i2];\n\n        var cx = (p0.x + p1.x + p2.x) / 3;\n        var cy = (p0.y + p1.y + p2.y) / 3;\n\n        let inside = this.customInsideChecker ? this.customInsideChecker.pointInPolygon(cx, cy) : this.pointInPolygon(cx, cy);\n\n        if (inside) {\n\n            var e1x = p1.x - p0.x;\n            var e1y = p1.y - p0.y;\n            var e2x = p2.x - p0.x;\n            var e2y = p2.y - p0.y;\n\n            var cross = e1x * e2y - e2x * e1y;\n\n            if (cross > 0) {\n                this.indices.push(i0, i1, i2);\n            } else {\n                this.indices.push(i0, i2, i1);\n            }\n\n        }\n    }\n\n    //Returns intersection points between the given line\n    //segment and the polygon's contours\n    findSegmentIntersections(ex1, ey1, ex2, ey2) {\n\n        if (!this.cachedEdges) {\n\n            this.cachedEdges = [];\n\n            for (let j=0; j<this.contours.length; j++) {\n                let cntr = this.contours[j];\n\n                for (let i=0; i<cntr.length-1; i++) {\n\n                    //Add quad for each face formed by the extruded contour\n                    let x1 = this.pts[cntr[i]].x;\n                    let y1 = this.pts[cntr[i]].y;\n                    let x2 = this.pts[cntr[i+1]].x;\n                    let y2 = this.pts[cntr[i+1]].y;\n\n                    let etmp = {\n                        v1 : { x:x1, y:y1 },\n                        v2 : { x:x2, y:y2 },\n                        dx: x2 - x1,\n                        dy: y2 - y1,\n                        length: Math.sqrt((x1-x2)**2 + (y1-y2)**2)\n                    };\n\n                    this.cachedEdges.push(etmp);\n                }\n            }\n        }\n\n        let e = {\n            v1 : { x:ex1, y:ey1 },\n            v2 : { x:ex2, y:ey2 },\n            dx: ex2 - ex1,\n            dy: ey2 - ey1,\n            length: Math.sqrt((ex1-ex2)**2 + (ey1-ey2)**2)\n        };\n\n        let precision = this.bbox.size().length() * 1e-4;\n\n        let res = [];\n\n        for (let i=0; i<this.cachedEdges.length; i++) {\n            let etmp = this.cachedEdges[i];\n            let xsect = segmentsIntersect(e, etmp, precision);\n\n            if (xsect && xsect.status === ONE_INTERSECTION) {\n                let pt = { x: xsect.e1[0], y : xsect.e1[1] };\n                pt.d = Math.sqrt((pt.x - ex1)**2 + (pt.y - ey1)**2);\n                res.push(pt);\n            }\n        }\n\n        if (res.length) {\n            //Sort in order along the input segment\n            res.sort((a, b) => a.d - b.d);\n\n            //Drop start and/or end points if they coincide with the segment start/end\n            if (res[0].d < precision) {\n                res.shift();\n            }\n\n            if (res.length && Math.abs(res[res.length-1].d - e.length) < precision) {\n                res.pop();\n            }\n        }\n\n        return res.length ? res : null;\n    }\n\n    //creates a vertex buffer containing a filled 2D polygon for visualization on the cut plane\n    //as 2D polygon mesh in the 3D model space\n    toPolygonMesh(packNormals) {\n\n        if (this.polygonMesh)\n            return this.polygonMesh;\n\n        var pts = this.pts;\n\n        var bg = new THREE.BufferGeometry();\n\n        var pos = new Float32Array(3*pts.length);\n        for (let j=0; j<pts.length; j++) {\n            pos[3*j] = pts[j].x;\n            pos[3*j+1] = pts[j].y;\n            pos[3*j+2] = 0;\n        }\n        bg.addAttribute(\"position\", new THREE.BufferAttribute(pos, 3));\n\n        var normal = packNormals ? new Uint16Array(2*pts.length) : new Float32Array(3*pts.length);\n\n        for (let j=0; j<pts.length; j++) {\n\n            if (packNormals) {\n                var pnx = (0/*Math.atan2(0, 0)*/ / Math.PI + 1.0) * 0.5;\n                var pny = (1.0 + 1.0) * 0.5;\n\n                normal[j*2] = (pnx * 65535)|0;\n                normal[j*2+1] = (pny * 65535)|0;\n            } else {\n                normal[3*j] = 0;\n                normal[3*j+1] = 0;\n                normal[3*j+2] = 1;\n            }\n        }\n\n        bg.addAttribute(\"normal\", new THREE.BufferAttribute(normal, packNormals ? 2 : 3));\n        if (packNormals) {\n            bg.attributes.normal.bytesPerItem = 2;\n            bg.attributes.normal.normalize = true;\n        }\n\n        var index = new Uint16Array(this.indices.length);\n        index.set(this.indices);\n\n        bg.addAttribute(\"index\", new THREE.BufferAttribute(index, 1));\n\n        bg.streamingDraw = true;\n        bg.streamingIndex = true;\n\n        this.polygonMesh = bg;\n\n        return bg;\n    }\n\n\n    //creates an extruded polygon 3d mesh\n    //with the given thickness (maxZ=0, minZ=-thickness)\n    toExtrudedMesh(thickness) {\n\n        if (this.extrudedMesh)\n            return this.extrudedMesh;\n\n        if (thickness === undefined)\n            thickness = 1;\n\n        //TODO: in case of failed triangulation\n        //we can still generate a tube mesh with just the sides, without top and bottom caps\n        if (!this.indices)\n            return null;\n\n        let vb = [];\n        let indices = [];\n        let iblines = [];\n        let vbase = 0;\n\n        //TODO: for better performance we can allocate ArrayBuffers up front with known\n        //sizes... once the logic works.\n\n        //Add the top and bottom polygons\n\n        //The top is just the already triangulated 2D polygon\n        //same as toPolygonMesh\n\n        let pts = this.pts;\n        for (let i=0; i<pts.length; i++) {\n            vb.push(pts[i].x, pts[i].y, 0);\n            vb.push(0,0,1);\n        }\n\n        let inds = this.indices;\n\n        for (let i=0; i<inds.length; i+=3) {\n            indices.push(inds[i], inds[i+1], inds[i+2]);\n        }\n\n        vbase += pts.length;\n\n        //The bottom is like the top, but mirrored.\n\n        for (let i=0; i<pts.length; i++) {\n            vb.push(pts[i].x, pts[i].y, -thickness);\n            vb.push(0,0,-1);\n        }\n\n        for (let i=0; i<inds.length; i+=3) {\n            indices.push(vbase + inds[i], vbase + inds[i+2], vbase + inds[i+1]);\n        }\n\n        vbase += pts.length;\n\n        //The sides -- each segment of the contours becomes a quad\n\n        let tmp = new Vector3();\n        let bbox = new Box3();\n\n        for (let j=0; j<this.contours.length; j++) {\n            let cntr = this.contours[j];\n\n            for (let i=0; i<cntr.length-1; i++) {\n\n                //Add quad for each face formed by the extruded contour\n                let x1 = this.pts[cntr[i]].x;\n                let y1 = this.pts[cntr[i]].y;\n                let z1 = 0;\n\n                tmp.set(x1, y1, z1);\n                bbox.expandByPoint(tmp);\n\n                let x2 = this.pts[cntr[i+1]].x;\n                let y2 = this.pts[cntr[i+1]].y;\n                let z2 = 0;\n\n                tmp.set(x2, y2, z2);\n                bbox.expandByPoint(tmp);\n\n                tmp.set(x1, y1, z1 - thickness);\n                bbox.expandByPoint(tmp);\n\n                //orthogonal to the face, will use for the normals\n                tmp.set(y1 - y2, x2 - x1, 0).normalize();\n\n                iblines.push(vbase, vbase+1, vbase, vbase+2, vbase+1, vbase+3, vbase+2, vbase+3);\n\n                //If it's a hole, normals and faces are inverted\n                if (j > 0) {\n\n                    vb.push(x1, y1, z1,             -tmp.x, -tmp.y, -tmp.z,\n                            x2, y2, z2, -tmp.x,     -tmp.y, -tmp.z,\n                            x1, y1, z1 - thickness, -tmp.x, -tmp.y, -tmp.z,\n                            x2, y2, z2 - thickness, -tmp.x, -tmp.y, -tmp.z);\n\n                    indices.push(vbase, vbase+3, vbase+2,  vbase, vbase+1, vbase+3);\n                } else {\n                    vb.push(x1, y1, z1,             tmp.x, tmp.y, tmp.z,\n                            x2, y2, z2,             tmp.x, tmp.y, tmp.z,\n                            x1, y1, z1 - thickness, tmp.x, tmp.y, tmp.z,\n                            x2, y2, z2 - thickness, tmp.x, tmp.y, tmp.z);\n\n                    indices.push(vbase, vbase+2, vbase+3,  vbase+0, vbase+3, vbase+1);\n                }\n\n                vbase += 4;\n            }\n        }\n\n        //Convert to mesh suitable for rendering\n        //TODO: As mentioned above, we can do this directly in the loop above\n        //for better performance.\n\n        let vbp = new Float32Array(vb.length);\n        vbp.set(vb);\n\n        let vbi = new Uint16Array(indices.length);\n        vbi.set(indices);\n\n        let vbili = new Uint16Array(iblines.length);\n        vbili.set(iblines);\n\n        let mdata = {\n            mesh: {\n                vb: vbp,\n                indices: vbi,\n                iblines: vbili,\n\n                vbstride: 6,\n                vblayout : {\n                    position : { offset: 0, itemSize: 3, bytesPerItem: 4},\n                    normal: { offset: 3, itemSize: 3, bytesPerItem: 4 },\n                },\n                boundingBox: bbox,\n                boundingSphere: { center: bbox.center(), radius: bbox.size().length * 0.5 }\n            }\n        };\n\n        avp.BufferGeometryUtils.meshToGeometry(mdata);\n\n        mdata.geometry.streamingDraw = true;\n        mdata.geometry.streamingIndex = true;\n\n        this.extrudedMesh = mdata.geometry;\n\n        return this.extrudedMesh;\n    }\n\n\n}","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.poly2tri = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\r\n    module.exports={\"version\": \"1.5.0\"}\r\n    },{}],2:[function(require,module,exports){\r\n    /*\r\n     * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n     * http://code.google.com/p/poly2tri/\r\n     * \r\n     * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n     * https://github.com/r3mi/poly2tri.js\r\n     * \r\n     * All rights reserved.\r\n     * \r\n     * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n     */\r\n    \r\n    /* jshint maxcomplexity:11 */\r\n    \r\n    \"use strict\";\r\n    \r\n    \r\n    /*\r\n     * Note\r\n     * ====\r\n     * the structure of this JavaScript version of poly2tri intentionally follows\r\n     * as closely as possible the structure of the reference C++ version, to make it \r\n     * easier to keep the 2 versions in sync.\r\n     */\r\n    \r\n    \r\n    // -------------------------------------------------------------------------Node\r\n    \r\n    /**\r\n     * Advancing front node\r\n     * @constructor\r\n     * @private\r\n     * @struct\r\n     * @param {!XY} p - Point\r\n     * @param {Triangle=} t triangle (optional)\r\n     */\r\n    var Node = function(p, t) {\r\n        /** @type {XY} */\r\n        this.point = p;\r\n    \r\n        /** @type {Triangle|null} */\r\n        this.triangle = t || null;\r\n    \r\n        /** @type {Node|null} */\r\n        this.next = null;\r\n        /** @type {Node|null} */\r\n        this.prev = null;\r\n    \r\n        /** @type {number} */\r\n        this.value = p.x;\r\n    };\r\n    \r\n    // ---------------------------------------------------------------AdvancingFront\r\n    /**\r\n     * @constructor\r\n     * @private\r\n     * @struct\r\n     * @param {Node} head\r\n     * @param {Node} tail\r\n     */\r\n    var AdvancingFront = function(head, tail) {\r\n        /** @type {Node} */\r\n        this.head_ = head;\r\n        /** @type {Node} */\r\n        this.tail_ = tail;\r\n        /** @type {Node} */\r\n        this.search_node_ = head;\r\n    };\r\n    \r\n    /** @return {Node} */\r\n    AdvancingFront.prototype.head = function() {\r\n        return this.head_;\r\n    };\r\n    \r\n    /** @param {Node} node */\r\n    AdvancingFront.prototype.setHead = function(node) {\r\n        this.head_ = node;\r\n    };\r\n    \r\n    /** @return {Node} */\r\n    AdvancingFront.prototype.tail = function() {\r\n        return this.tail_;\r\n    };\r\n    \r\n    /** @param {Node} node */\r\n    AdvancingFront.prototype.setTail = function(node) {\r\n        this.tail_ = node;\r\n    };\r\n    \r\n    /** @return {Node} */\r\n    AdvancingFront.prototype.search = function() {\r\n        return this.search_node_;\r\n    };\r\n    \r\n    /** @param {Node} node */\r\n    AdvancingFront.prototype.setSearch = function(node) {\r\n        this.search_node_ = node;\r\n    };\r\n    \r\n    /** @return {Node} */\r\n    AdvancingFront.prototype.findSearchNode = function(/*x*/) {\r\n        // TODO: implement BST index\r\n        return this.search_node_;\r\n    };\r\n    \r\n    /**\r\n     * @param {number} x value\r\n     * @return {Node}\r\n     */\r\n    AdvancingFront.prototype.locateNode = function(x) {\r\n        var node = this.search_node_;\r\n    \r\n        /* jshint boss:true */\r\n        if (x < node.value) {\r\n            while (node = node.prev) {\r\n                if (x >= node.value) {\r\n                    this.search_node_ = node;\r\n                    return node;\r\n                }\r\n            }\r\n        } else {\r\n            while (node = node.next) {\r\n                if (x < node.value) {\r\n                    this.search_node_ = node.prev;\r\n                    return node.prev;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    \r\n    /**\r\n     * @param {!XY} point - Point\r\n     * @return {Node}\r\n     */\r\n    AdvancingFront.prototype.locatePoint = function(point) {\r\n        var px = point.x;\r\n        var node = this.findSearchNode(px);\r\n        var nx = node.point.x;\r\n    \r\n        if (px === nx) {\r\n            // Here we are comparing point references, not values\r\n            if (point !== node.point) {\r\n                // We might have two nodes with same x value for a short time\r\n                if (point === node.prev.point) {\r\n                    node = node.prev;\r\n                } else if (point === node.next.point) {\r\n                    node = node.next;\r\n                } else {\r\n                    throw new Error('poly2tri Invalid AdvancingFront.locatePoint() call');\r\n                }\r\n            }\r\n        } else if (px < nx) {\r\n            /* jshint boss:true */\r\n            while (node = node.prev) {\r\n                if (point === node.point) {\r\n                    break;\r\n                }\r\n            }\r\n        } else {\r\n            while (node = node.next) {\r\n                if (point === node.point) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    \r\n        if (node) {\r\n            this.search_node_ = node;\r\n        }\r\n        return node;\r\n    };\r\n    \r\n    \r\n    // ----------------------------------------------------------------------Exports\r\n    \r\n    module.exports = AdvancingFront;\r\n    module.exports.Node = Node;\r\n    \r\n    \r\n    },{}],3:[function(require,module,exports){\r\n    /*\r\n     * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n     * http://code.google.com/p/poly2tri/\r\n     *\r\n     * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n     * https://github.com/r3mi/poly2tri.js\r\n     *\r\n     * All rights reserved.\r\n     *\r\n     * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n     */\r\n    \r\n    \"use strict\";\r\n    \r\n    /*\r\n     * Function added in the JavaScript version (was not present in the c++ version)\r\n     */\r\n    \r\n    /**\r\n     * assert and throw an exception.\r\n     *\r\n     * @private\r\n     * @param {boolean} condition   the condition which is asserted\r\n     * @param {string} message      the message which is display is condition is falsy\r\n     */\r\n    function assert(condition, message) {\r\n        if (!condition) {\r\n            throw new Error(message || \"Assert Failed\");\r\n        }\r\n    }\r\n    module.exports = assert;\r\n    \r\n    \r\n    \r\n    },{}],4:[function(require,module,exports){\r\n    /*\r\n     * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n     * http://code.google.com/p/poly2tri/\r\n     * \r\n     * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n     * https://github.com/r3mi/poly2tri.js\r\n     * \r\n     * All rights reserved.\r\n     * \r\n     * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n     */\r\n    \r\n    \"use strict\";\r\n    \r\n    \r\n    /*\r\n     * Note\r\n     * ====\r\n     * the structure of this JavaScript version of poly2tri intentionally follows\r\n     * as closely as possible the structure of the reference C++ version, to make it \r\n     * easier to keep the 2 versions in sync.\r\n     */\r\n    \r\n    var xy = require('./xy');\r\n    \r\n    // ------------------------------------------------------------------------Point\r\n    /**\r\n     * Construct a point\r\n     * @example\r\n     *      var point = new poly2tri.Point(150, 150);\r\n     * @public\r\n     * @constructor\r\n     * @struct\r\n     * @param {number=} x    coordinate (0 if undefined)\r\n     * @param {number=} y    coordinate (0 if undefined)\r\n     */\r\n    var Point = function(x, y) {\r\n        /**\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        this.x = +x || 0;\r\n        /**\r\n         * @type {number}\r\n         * @expose\r\n         */\r\n        this.y = +y || 0;\r\n    \r\n        // All extra fields added to Point are prefixed with _p2t_\r\n        // to avoid collisions if custom Point class is used.\r\n    \r\n        /**\r\n         * The edges this point constitutes an upper ending point\r\n         * @private\r\n         * @type {Array.<Edge>}\r\n         */\r\n        this._p2t_edge_list = null;\r\n    };\r\n    \r\n    /**\r\n     * For pretty printing\r\n     * @example\r\n     *      \"p=\" + new poly2tri.Point(5,42)\r\n     *      // → \"p=(5;42)\"\r\n     * @returns {string} <code>\"(x;y)\"</code>\r\n     */\r\n    Point.prototype.toString = function() {\r\n        return xy.toStringBase(this);\r\n    };\r\n    \r\n    /**\r\n     * JSON output, only coordinates\r\n     * @example\r\n     *      JSON.stringify(new poly2tri.Point(1,2))\r\n     *      // → '{\"x\":1,\"y\":2}'\r\n     */\r\n    Point.prototype.toJSON = function() {\r\n        return { x: this.x, y: this.y };\r\n    };\r\n    \r\n    /**\r\n     * Creates a copy of this Point object.\r\n     * @return {Point} new cloned point\r\n     */\r\n    Point.prototype.clone = function() {\r\n        return new Point(this.x, this.y);\r\n    };\r\n    \r\n    /**\r\n     * Set this Point instance to the origo. <code>(0; 0)</code>\r\n     * @return {Point} this (for chaining)\r\n     */\r\n    Point.prototype.set_zero = function() {\r\n        this.x = 0.0;\r\n        this.y = 0.0;\r\n        return this; // for chaining\r\n    };\r\n    \r\n    /**\r\n     * Set the coordinates of this instance.\r\n     * @param {number} x   coordinate\r\n     * @param {number} y   coordinate\r\n     * @return {Point} this (for chaining)\r\n     */\r\n    Point.prototype.set = function(x, y) {\r\n        this.x = +x || 0;\r\n        this.y = +y || 0;\r\n        return this; // for chaining\r\n    };\r\n    \r\n    /**\r\n     * Negate this Point instance. (component-wise)\r\n     * @return {Point} this (for chaining)\r\n     */\r\n    Point.prototype.negate = function() {\r\n        this.x = -this.x;\r\n        this.y = -this.y;\r\n        return this; // for chaining\r\n    };\r\n    \r\n    /**\r\n     * Add another Point object to this instance. (component-wise)\r\n     * @param {!Point} n - Point object.\r\n     * @return {Point} this (for chaining)\r\n     */\r\n    Point.prototype.add = function(n) {\r\n        this.x += n.x;\r\n        this.y += n.y;\r\n        return this; // for chaining\r\n    };\r\n    \r\n    /**\r\n     * Subtract this Point instance with another point given. (component-wise)\r\n     * @param {!Point} n - Point object.\r\n     * @return {Point} this (for chaining)\r\n     */\r\n    Point.prototype.sub = function(n) {\r\n        this.x -= n.x;\r\n        this.y -= n.y;\r\n        return this; // for chaining\r\n    };\r\n    \r\n    /**\r\n     * Multiply this Point instance by a scalar. (component-wise)\r\n     * @param {number} s   scalar.\r\n     * @return {Point} this (for chaining)\r\n     */\r\n    Point.prototype.mul = function(s) {\r\n        this.x *= s;\r\n        this.y *= s;\r\n        return this; // for chaining\r\n    };\r\n    \r\n    /**\r\n     * Return the distance of this Point instance from the origo.\r\n     * @return {number} distance\r\n     */\r\n    Point.prototype.length = function() {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    };\r\n    \r\n    /**\r\n     * Normalize this Point instance (as a vector).\r\n     * @return {number} The original distance of this instance from the origo.\r\n     */\r\n    Point.prototype.normalize = function() {\r\n        var len = this.length();\r\n        this.x /= len;\r\n        this.y /= len;\r\n        return len;\r\n    };\r\n    \r\n    /**\r\n     * Test this Point object with another for equality.\r\n     * @param {!XY} p - any \"Point like\" object with {x,y}\r\n     * @return {boolean} <code>true</code> if same x and y coordinates, <code>false</code> otherwise.\r\n     */\r\n    Point.prototype.equals = function(p) {\r\n        return this.x === p.x && this.y === p.y;\r\n    };\r\n    \r\n    \r\n    // -----------------------------------------------------Point (\"static\" methods)\r\n    \r\n    /**\r\n     * Negate a point component-wise and return the result as a new Point object.\r\n     * @param {!XY} p - any \"Point like\" object with {x,y}\r\n     * @return {Point} the resulting Point object.\r\n     */\r\n    Point.negate = function(p) {\r\n        return new Point(-p.x, -p.y);\r\n    };\r\n    \r\n    /**\r\n     * Add two points component-wise and return the result as a new Point object.\r\n     * @param {!XY} a - any \"Point like\" object with {x,y}\r\n     * @param {!XY} b - any \"Point like\" object with {x,y}\r\n     * @return {Point} the resulting Point object.\r\n     */\r\n    Point.add = function(a, b) {\r\n        return new Point(a.x + b.x, a.y + b.y);\r\n    };\r\n    \r\n    /**\r\n     * Subtract two points component-wise and return the result as a new Point object.\r\n     * @param {!XY} a - any \"Point like\" object with {x,y}\r\n     * @param {!XY} b - any \"Point like\" object with {x,y}\r\n     * @return {Point} the resulting Point object.\r\n     */\r\n    Point.sub = function(a, b) {\r\n        return new Point(a.x - b.x, a.y - b.y);\r\n    };\r\n    \r\n    /**\r\n     * Multiply a point by a scalar and return the result as a new Point object.\r\n     * @param {number} s - the scalar\r\n     * @param {!XY} p - any \"Point like\" object with {x,y}\r\n     * @return {Point} the resulting Point object.\r\n     */\r\n    Point.mul = function(s, p) {\r\n        return new Point(s * p.x, s * p.y);\r\n    };\r\n    \r\n    /**\r\n     * Perform the cross product on either two points (this produces a scalar)\r\n     * or a point and a scalar (this produces a point).\r\n     * This function requires two parameters, either may be a Point object or a\r\n     * number.\r\n     * @param  {XY|number} a - Point object or scalar.\r\n     * @param  {XY|number} b - Point object or scalar.\r\n     * @return {Point|number} a Point object or a number, depending on the parameters.\r\n     */\r\n    Point.cross = function(a, b) {\r\n        if (typeof(a) === 'number') {\r\n            if (typeof(b) === 'number') {\r\n                return a * b;\r\n            } else {\r\n                return new Point(-a * b.y, a * b.x);\r\n            }\r\n        } else {\r\n            if (typeof(b) === 'number') {\r\n                return new Point(b * a.y, -b * a.x);\r\n            } else {\r\n                return a.x * b.y - a.y * b.x;\r\n            }\r\n        }\r\n    };\r\n    \r\n    \r\n    // -----------------------------------------------------------------\"Point-Like\"\r\n    /*\r\n     * The following functions operate on \"Point\" or any \"Point like\" object \r\n     * with {x,y} (duck typing).\r\n     */\r\n    \r\n    Point.toString = xy.toString;\r\n    Point.compare = xy.compare;\r\n    Point.cmp = xy.compare; // backward compatibility\r\n    Point.equals = xy.equals;\r\n    \r\n    /**\r\n     * Peform the dot product on two vectors.\r\n     * @public\r\n     * @param {!XY} a - any \"Point like\" object with {x,y}\r\n     * @param {!XY} b - any \"Point like\" object with {x,y}\r\n     * @return {number} The dot product\r\n     */\r\n    Point.dot = function(a, b) {\r\n        return a.x * b.x + a.y * b.y;\r\n    };\r\n    \r\n    \r\n    // ---------------------------------------------------------Exports (public API)\r\n    \r\n    module.exports = Point;\r\n    \r\n    },{\"./xy\":11}],5:[function(require,module,exports){\r\n    /*\r\n     * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n     * http://code.google.com/p/poly2tri/\r\n     * \r\n     * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n     * https://github.com/r3mi/poly2tri.js\r\n     * \r\n     * All rights reserved.\r\n     * \r\n     * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n     */\r\n    \r\n    \"use strict\";\r\n    \r\n    /*\r\n     * Class added in the JavaScript version (was not present in the c++ version)\r\n     */\r\n    \r\n    var xy = require('./xy');\r\n    \r\n    /**\r\n     * Custom exception class to indicate invalid Point values\r\n     * @constructor\r\n     * @public\r\n     * @extends Error\r\n     * @struct\r\n     * @param {string=} message - error message\r\n     * @param {Array.<XY>=} points - invalid points\r\n     */\r\n    var PointError = function(message, points) {\r\n        this.name = \"PointError\";\r\n        /**\r\n         * Invalid points\r\n         * @public\r\n         * @type {Array.<XY>}\r\n         */\r\n        this.points = points = points || [];\r\n        /**\r\n         * Error message\r\n         * @public\r\n         * @type {string}\r\n         */\r\n        this.message = message || \"Invalid Points!\";\r\n        for (var i = 0; i < points.length; i++) {\r\n            this.message += \" \" + xy.toString(points[i]);\r\n        }\r\n    };\r\n    PointError.prototype = new Error();\r\n    PointError.prototype.constructor = PointError;\r\n    \r\n    \r\n    module.exports = PointError;\r\n    \r\n    },{\"./xy\":11}],6:[function(require,module,exports){\r\n    (function (global){\r\n    /*\r\n     * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n     * http://code.google.com/p/poly2tri/\r\n     * \r\n     * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n     * https://github.com/r3mi/poly2tri.js\r\n     *\r\n     * All rights reserved.\r\n     *\r\n     * Redistribution and use in source and binary forms, with or without modification,\r\n     * are permitted provided that the following conditions are met:\r\n     *\r\n     * * Redistributions of source code must retain the above copyright notice,\r\n     *   this list of conditions and the following disclaimer.\r\n     * * Redistributions in binary form must reproduce the above copyright notice,\r\n     *   this list of conditions and the following disclaimer in the documentation\r\n     *   and/or other materials provided with the distribution.\r\n     * * Neither the name of Poly2Tri nor the names of its contributors may be\r\n     *   used to endorse or promote products derived from this software without specific\r\n     *   prior written permission.\r\n     *\r\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n     * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n     * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n     * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\r\n     * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n     * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n     * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n     * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\n     * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n     * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n     * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n     */\r\n    \r\n    \"use strict\";\r\n    \r\n    /**\r\n     * Public API for poly2tri.js\r\n     * @module poly2tri\r\n     */\r\n    \r\n    \r\n    /**\r\n     * If you are not using a module system (e.g. CommonJS, RequireJS), you can access this library\r\n     * as a global variable <code>poly2tri</code> i.e. <code>window.poly2tri</code> in a browser.\r\n     * @name poly2tri\r\n     * @global\r\n     * @public\r\n     * @type {module:poly2tri}\r\n     */\r\n    var previousPoly2tri = global.poly2tri;\r\n    /**\r\n     * For Browser + &lt;script&gt; :\r\n     * reverts the {@linkcode poly2tri} global object to its previous value,\r\n     * and returns a reference to the instance called.\r\n     *\r\n     * @example\r\n     *              var p = poly2tri.noConflict();\r\n     * @public\r\n     * @return {module:poly2tri} instance called\r\n     */\r\n    // (this feature is not automatically provided by browserify).\r\n    exports.noConflict = function() {\r\n        global.poly2tri = previousPoly2tri;\r\n        return exports;\r\n    };\r\n    \r\n    /**\r\n     * poly2tri library version\r\n     * @public\r\n     * @const {string}\r\n     */\r\n    exports.VERSION = require('../dist/version.json').version;\r\n    \r\n    /**\r\n     * Exports the {@linkcode PointError} class.\r\n     * @public\r\n     * @typedef {PointError} module:poly2tri.PointError\r\n     * @function\r\n     */\r\n    exports.PointError = require('./pointerror');\r\n    /**\r\n     * Exports the {@linkcode Point} class.\r\n     * @public\r\n     * @typedef {Point} module:poly2tri.Point\r\n     * @function\r\n     */\r\n    exports.Point = require('./point');\r\n    /**\r\n     * Exports the {@linkcode Triangle} class.\r\n     * @public\r\n     * @typedef {Triangle} module:poly2tri.Triangle\r\n     * @function\r\n     */\r\n    exports.Triangle = require('./triangle');\r\n    /**\r\n     * Exports the {@linkcode SweepContext} class.\r\n     * @public\r\n     * @typedef {SweepContext} module:poly2tri.SweepContext\r\n     * @function\r\n     */\r\n    exports.SweepContext = require('./sweepcontext');\r\n    \r\n    \r\n    // Backward compatibility\r\n    var sweep = require('./sweep');\r\n    /**\r\n     * @function\r\n     * @deprecated use {@linkcode SweepContext#triangulate} instead\r\n     */\r\n    exports.triangulate = sweep.triangulate;\r\n    /**\r\n     * @deprecated use {@linkcode SweepContext#triangulate} instead\r\n     * @property {function} Triangulate - use {@linkcode SweepContext#triangulate} instead\r\n     */\r\n    exports.sweep = {Triangulate: sweep.triangulate};\r\n    \r\n    }).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\r\n    },{\"../dist/version.json\":1,\"./point\":4,\"./pointerror\":5,\"./sweep\":7,\"./sweepcontext\":8,\"./triangle\":9}],7:[function(require,module,exports){\r\n    /*\r\n     * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n     * http://code.google.com/p/poly2tri/\r\n     * \r\n     * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n     * https://github.com/r3mi/poly2tri.js\r\n     * \r\n     * All rights reserved.\r\n     * \r\n     * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n     */\r\n    \r\n    /* jshint latedef:nofunc, maxcomplexity:9 */\r\n    \r\n    \"use strict\";\r\n    \r\n    /**\r\n     * This 'Sweep' module is present in order to keep this JavaScript version\r\n     * as close as possible to the reference C++ version, even though almost all\r\n     * functions could be declared as methods on the {@linkcode module:sweepcontext~SweepContext} object.\r\n     * @module\r\n     * @private\r\n     */\r\n    \r\n    /*\r\n     * Note\r\n     * ====\r\n     * the structure of this JavaScript version of poly2tri intentionally follows\r\n     * as closely as possible the structure of the reference C++ version, to make it \r\n     * easier to keep the 2 versions in sync.\r\n     */\r\n    \r\n    var assert = require('./assert');\r\n    var PointError = require('./pointerror');\r\n    var Triangle = require('./triangle');\r\n    var Node = require('./advancingfront').Node;\r\n    \r\n    \r\n    // ------------------------------------------------------------------------utils\r\n    \r\n    var utils = require('./utils');\r\n    \r\n    /** @const */\r\n    var EPSILON = utils.EPSILON;\r\n    \r\n    /** @const */\r\n    var Orientation = utils.Orientation;\r\n    /** @const */\r\n    var orient2d = utils.orient2d;\r\n    /** @const */\r\n    var inScanArea = utils.inScanArea;\r\n    /** @const */\r\n    var isAngleObtuse = utils.isAngleObtuse;\r\n    \r\n    \r\n    // ------------------------------------------------------------------------Sweep\r\n    \r\n    /**\r\n     * Triangulate the polygon with holes and Steiner points.\r\n     * Do this AFTER you've added the polyline, holes, and Steiner points\r\n     * @private\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     */\r\n    function triangulate(tcx) {\r\n        tcx.initTriangulation();\r\n        tcx.createAdvancingFront();\r\n        // Sweep points; build mesh\r\n        sweepPoints(tcx);\r\n        // Clean up\r\n        finalizationPolygon(tcx);\r\n    }\r\n    \r\n    /**\r\n     * Start sweeping the Y-sorted point set from bottom to top\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     */\r\n    function sweepPoints(tcx) {\r\n        var i, len = tcx.pointCount();\r\n        for (i = 1; i < len; ++i) {\r\n            var point = tcx.getPoint(i);\r\n            var node = pointEvent(tcx, point);\r\n            var edges = point._p2t_edge_list;\r\n            for (var j = 0; edges && j < edges.length; ++j) {\r\n                edgeEventByEdge(tcx, edges[j], node);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     */\r\n    function finalizationPolygon(tcx) {\r\n        // Get an Internal triangle to start with\r\n        var t = tcx.front().head().next.triangle;\r\n        var p = tcx.front().head().next.point;\r\n        while (!t.getConstrainedEdgeCW(p)) {\r\n            t = t.neighborCCW(p);\r\n        }\r\n    \r\n        // Collect interior triangles constrained by edges\r\n        tcx.meshClean(t);\r\n    }\r\n    \r\n    /**\r\n     * Find closes node to the left of the new point and\r\n     * create a new triangle. If needed new holes and basins\r\n     * will be filled to.\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     * @param {!XY} point   Point\r\n     */\r\n    function pointEvent(tcx, point) {\r\n        var node = tcx.locateNode(point);\r\n        var new_node = newFrontTriangle(tcx, point, node);\r\n    \r\n        // Only need to check +epsilon since point never have smaller\r\n        // x value than node due to how we fetch nodes from the front\r\n        if (point.x <= node.point.x + (EPSILON)) {\r\n            fill(tcx, node);\r\n        }\r\n    \r\n        //tcx.AddNode(new_node);\r\n    \r\n        fillAdvancingFront(tcx, new_node);\r\n        return new_node;\r\n    }\r\n    \r\n    function edgeEventByEdge(tcx, edge, node) {\r\n        tcx.edge_event.constrained_edge = edge;\r\n        tcx.edge_event.right = (edge.p.x > edge.q.x);\r\n    \r\n        if (isEdgeSideOfTriangle(node.triangle, edge.p, edge.q)) {\r\n            return;\r\n        }\r\n    \r\n        // For now we will do all needed filling\r\n        // TODO: integrate with flip process might give some better performance\r\n        //       but for now this avoid the issue with cases that needs both flips and fills\r\n        fillEdgeEvent(tcx, edge, node);\r\n        edgeEventByPoints(tcx, edge.p, edge.q, node.triangle, edge.q);\r\n    }\r\n    \r\n    function edgeEventByPoints(tcx, ep, eq, triangle, point) {\r\n        if (isEdgeSideOfTriangle(triangle, ep, eq)) {\r\n            return;\r\n        }\r\n    \r\n        var p1 = triangle.pointCCW(point);\r\n        var o1 = orient2d(eq, p1, ep);\r\n        if (o1 === Orientation.COLLINEAR) {\r\n            // TODO integrate here changes from C++ version\r\n            // (C++ repo revision 09880a869095 dated March 8, 2011)\r\n            throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p1, ep]);\r\n        }\r\n    \r\n        var p2 = triangle.pointCW(point);\r\n        var o2 = orient2d(eq, p2, ep);\r\n        if (o2 === Orientation.COLLINEAR) {\r\n            // TODO integrate here changes from C++ version\r\n            // (C++ repo revision 09880a869095 dated March 8, 2011)\r\n            throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p2, ep]);\r\n        }\r\n    \r\n        if (o1 === o2) {\r\n            // Need to decide if we are rotating CW or CCW to get to a triangle\r\n            // that will cross edge\r\n            if (o1 === Orientation.CW) {\r\n                triangle = triangle.neighborCCW(point);\r\n            } else {\r\n                triangle = triangle.neighborCW(point);\r\n            }\r\n            edgeEventByPoints(tcx, ep, eq, triangle, point);\r\n        } else {\r\n            // This triangle crosses constraint so lets flippin start!\r\n            flipEdgeEvent(tcx, ep, eq, triangle, point);\r\n        }\r\n    }\r\n    \r\n    function isEdgeSideOfTriangle(triangle, ep, eq) {\r\n        var index = triangle.edgeIndex(ep, eq);\r\n        if (index !== -1) {\r\n            triangle.markConstrainedEdgeByIndex(index);\r\n            var t = triangle.getNeighbor(index);\r\n            if (t) {\r\n                t.markConstrainedEdgeByPoints(ep, eq);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * Creates a new front triangle and legalize it\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     */\r\n    function newFrontTriangle(tcx, point, node) {\r\n        var triangle = new Triangle(point, node.point, node.next.point);\r\n    \r\n        triangle.markNeighbor(node.triangle);\r\n        tcx.addToMap(triangle);\r\n    \r\n        var new_node = new Node(point);\r\n        new_node.next = node.next;\r\n        new_node.prev = node;\r\n        node.next.prev = new_node;\r\n        node.next = new_node;\r\n    \r\n        if (!legalize(tcx, triangle)) {\r\n            tcx.mapTriangleToNodes(triangle);\r\n        }\r\n    \r\n        return new_node;\r\n    }\r\n    \r\n    /**\r\n     * Adds a triangle to the advancing front to fill a hole.\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     * @param node - middle node, that is the bottom of the hole\r\n     */\r\n    function fill(tcx, node) {\r\n        var triangle = new Triangle(node.prev.point, node.point, node.next.point);\r\n    \r\n        // TODO: should copy the constrained_edge value from neighbor triangles\r\n        //       for now constrained_edge values are copied during the legalize\r\n        triangle.markNeighbor(node.prev.triangle);\r\n        triangle.markNeighbor(node.triangle);\r\n    \r\n        tcx.addToMap(triangle);\r\n    \r\n        // Update the advancing front\r\n        node.prev.next = node.next;\r\n        node.next.prev = node.prev;\r\n    \r\n    \r\n        // If it was legalized the triangle has already been mapped\r\n        if (!legalize(tcx, triangle)) {\r\n            tcx.mapTriangleToNodes(triangle);\r\n        }\r\n    \r\n        //tcx.removeNode(node);\r\n    }\r\n    \r\n    /**\r\n     * Fills holes in the Advancing Front\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     */\r\n    function fillAdvancingFront(tcx, n) {\r\n        // Fill right holes\r\n        var node = n.next;\r\n        while (node.next) {\r\n            // TODO integrate here changes from C++ version\r\n            // (C++ repo revision acf81f1f1764 dated April 7, 2012)\r\n            if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {\r\n                break;\r\n            }\r\n            fill(tcx, node);\r\n            node = node.next;\r\n        }\r\n    \r\n        // Fill left holes\r\n        node = n.prev;\r\n        while (node.prev) {\r\n            // TODO integrate here changes from C++ version\r\n            // (C++ repo revision acf81f1f1764 dated April 7, 2012)\r\n            if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {\r\n                break;\r\n            }\r\n            fill(tcx, node);\r\n            node = node.prev;\r\n        }\r\n    \r\n        // Fill right basins\r\n        if (n.next && n.next.next) {\r\n            if (isBasinAngleRight(n)) {\r\n                fillBasin(tcx, n);\r\n            }\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * The basin angle is decided against the horizontal line [1,0].\r\n     * @param {Node} node\r\n     * @return {boolean} true if angle < 3*π/4\r\n     */\r\n    function isBasinAngleRight(node) {\r\n        var ax = node.point.x - node.next.next.point.x;\r\n        var ay = node.point.y - node.next.next.point.y;\r\n        assert(ay >= 0, \"unordered y\");\r\n        return (ax >= 0 || Math.abs(ax) < ay);\r\n    }\r\n    \r\n    /**\r\n     * Returns true if triangle was legalized\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     * @return {boolean}\r\n     */\r\n    function legalize(tcx, t) {\r\n        // To legalize a triangle we start by finding if any of the three edges\r\n        // violate the Delaunay condition\r\n        for (var i = 0; i < 3; ++i) {\r\n            if (t.delaunay_edge[i]) {\r\n                continue;\r\n            }\r\n            var ot = t.getNeighbor(i);\r\n            if (ot) {\r\n                var p = t.getPoint(i);\r\n                var op = ot.oppositePoint(t, p);\r\n                var oi = ot.index(op);\r\n    \r\n                // If this is a Constrained Edge or a Delaunay Edge(only during recursive legalization)\r\n                // then we should not try to legalize\r\n                if (ot.constrained_edge[oi] || ot.delaunay_edge[oi]) {\r\n                    t.constrained_edge[i] = ot.constrained_edge[oi];\r\n                    continue;\r\n                }\r\n    \r\n                var inside = inCircle(p, t.pointCCW(p), t.pointCW(p), op);\r\n                if (inside) {\r\n                    // Lets mark this shared edge as Delaunay\r\n                    t.delaunay_edge[i] = true;\r\n                    ot.delaunay_edge[oi] = true;\r\n    \r\n                    // Lets rotate shared edge one vertex CW to legalize it\r\n                    rotateTrianglePair(t, p, ot, op);\r\n    \r\n                    // We now got one valid Delaunay Edge shared by two triangles\r\n                    // This gives us 4 new edges to check for Delaunay\r\n    \r\n                    // Make sure that triangle to node mapping is done only one time for a specific triangle\r\n                    var not_legalized = !legalize(tcx, t);\r\n                    if (not_legalized) {\r\n                        tcx.mapTriangleToNodes(t);\r\n                    }\r\n    \r\n                    not_legalized = !legalize(tcx, ot);\r\n                    if (not_legalized) {\r\n                        tcx.mapTriangleToNodes(ot);\r\n                    }\r\n                    // Reset the Delaunay edges, since they only are valid Delaunay edges\r\n                    // until we add a new triangle or point.\r\n                    // XXX: need to think about this. Can these edges be tried after we\r\n                    //      return to previous recursive level?\r\n                    t.delaunay_edge[i] = false;\r\n                    ot.delaunay_edge[oi] = false;\r\n    \r\n                    // If triangle have been legalized no need to check the other edges since\r\n                    // the recursive legalization will handles those so we can end here.\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * <b>Requirement</b>:<br>\r\n     * 1. a,b and c form a triangle.<br>\r\n     * 2. a and d is know to be on opposite side of bc<br>\r\n     * <pre>\r\n     *                a\r\n     *                +\r\n     *               / \\\r\n     *              /   \\\r\n     *            b/     \\c\r\n     *            +-------+\r\n     *           /    d    \\\r\n     *          /           \\\r\n     * </pre>\r\n     * <b>Fact</b>: d has to be in area B to have a chance to be inside the circle formed by\r\n     *  a,b and c<br>\r\n     *  d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW<br>\r\n     *  This preknowledge gives us a way to optimize the incircle test\r\n     * @param pa - triangle point, opposite d\r\n     * @param pb - triangle point\r\n     * @param pc - triangle point\r\n     * @param pd - point opposite a\r\n     * @return {boolean} true if d is inside circle, false if on circle edge\r\n     */\r\n    function inCircle(pa, pb, pc, pd) {\r\n        var adx = pa.x - pd.x;\r\n        var ady = pa.y - pd.y;\r\n        var bdx = pb.x - pd.x;\r\n        var bdy = pb.y - pd.y;\r\n    \r\n        var adxbdy = adx * bdy;\r\n        var bdxady = bdx * ady;\r\n        var oabd = adxbdy - bdxady;\r\n        if (oabd <= 0) {\r\n            return false;\r\n        }\r\n    \r\n        var cdx = pc.x - pd.x;\r\n        var cdy = pc.y - pd.y;\r\n    \r\n        var cdxady = cdx * ady;\r\n        var adxcdy = adx * cdy;\r\n        var ocad = cdxady - adxcdy;\r\n        if (ocad <= 0) {\r\n            return false;\r\n        }\r\n    \r\n        var bdxcdy = bdx * cdy;\r\n        var cdxbdy = cdx * bdy;\r\n    \r\n        var alift = adx * adx + ady * ady;\r\n        var blift = bdx * bdx + bdy * bdy;\r\n        var clift = cdx * cdx + cdy * cdy;\r\n    \r\n        var det = alift * (bdxcdy - cdxbdy) + blift * ocad + clift * oabd;\r\n        return det > 0;\r\n    }\r\n    \r\n    /**\r\n     * Rotates a triangle pair one vertex CW\r\n     *<pre>\r\n     *       n2                    n2\r\n     *  P +-----+             P +-----+\r\n     *    | t  /|               |\\  t |\r\n     *    |   / |               | \\   |\r\n     *  n1|  /  |n3           n1|  \\  |n3\r\n     *    | /   |    after CW   |   \\ |\r\n     *    |/ oT |               | oT \\|\r\n     *    +-----+ oP            +-----+\r\n     *       n4                    n4\r\n     * </pre>\r\n     */\r\n    function rotateTrianglePair(t, p, ot, op) {\r\n        var n1, n2, n3, n4;\r\n        n1 = t.neighborCCW(p);\r\n        n2 = t.neighborCW(p);\r\n        n3 = ot.neighborCCW(op);\r\n        n4 = ot.neighborCW(op);\r\n    \r\n        var ce1, ce2, ce3, ce4;\r\n        ce1 = t.getConstrainedEdgeCCW(p);\r\n        ce2 = t.getConstrainedEdgeCW(p);\r\n        ce3 = ot.getConstrainedEdgeCCW(op);\r\n        ce4 = ot.getConstrainedEdgeCW(op);\r\n    \r\n        var de1, de2, de3, de4;\r\n        de1 = t.getDelaunayEdgeCCW(p);\r\n        de2 = t.getDelaunayEdgeCW(p);\r\n        de3 = ot.getDelaunayEdgeCCW(op);\r\n        de4 = ot.getDelaunayEdgeCW(op);\r\n    \r\n        t.legalize(p, op);\r\n        ot.legalize(op, p);\r\n    \r\n        // Remap delaunay_edge\r\n        ot.setDelaunayEdgeCCW(p, de1);\r\n        t.setDelaunayEdgeCW(p, de2);\r\n        t.setDelaunayEdgeCCW(op, de3);\r\n        ot.setDelaunayEdgeCW(op, de4);\r\n    \r\n        // Remap constrained_edge\r\n        ot.setConstrainedEdgeCCW(p, ce1);\r\n        t.setConstrainedEdgeCW(p, ce2);\r\n        t.setConstrainedEdgeCCW(op, ce3);\r\n        ot.setConstrainedEdgeCW(op, ce4);\r\n    \r\n        // Remap neighbors\r\n        // XXX: might optimize the markNeighbor by keeping track of\r\n        //      what side should be assigned to what neighbor after the\r\n        //      rotation. Now mark neighbor does lots of testing to find\r\n        //      the right side.\r\n        t.clearNeighbors();\r\n        ot.clearNeighbors();\r\n        if (n1) {\r\n            ot.markNeighbor(n1);\r\n        }\r\n        if (n2) {\r\n            t.markNeighbor(n2);\r\n        }\r\n        if (n3) {\r\n            t.markNeighbor(n3);\r\n        }\r\n        if (n4) {\r\n            ot.markNeighbor(n4);\r\n        }\r\n        t.markNeighbor(ot);\r\n    }\r\n    \r\n    /**\r\n     * Fills a basin that has formed on the Advancing Front to the right\r\n     * of given node.<br>\r\n     * First we decide a left,bottom and right node that forms the\r\n     * boundaries of the basin. Then we do a reqursive fill.\r\n     *\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     * @param node - starting node, this or next node will be left node\r\n     */\r\n    function fillBasin(tcx, node) {\r\n        if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\r\n            tcx.basin.left_node = node.next.next;\r\n        } else {\r\n            tcx.basin.left_node = node.next;\r\n        }\r\n    \r\n        // Find the bottom and right node\r\n        tcx.basin.bottom_node = tcx.basin.left_node;\r\n        while (tcx.basin.bottom_node.next && tcx.basin.bottom_node.point.y >= tcx.basin.bottom_node.next.point.y) {\r\n            tcx.basin.bottom_node = tcx.basin.bottom_node.next;\r\n        }\r\n        if (tcx.basin.bottom_node === tcx.basin.left_node) {\r\n            // No valid basin\r\n            return;\r\n        }\r\n    \r\n        tcx.basin.right_node = tcx.basin.bottom_node;\r\n        while (tcx.basin.right_node.next && tcx.basin.right_node.point.y < tcx.basin.right_node.next.point.y) {\r\n            tcx.basin.right_node = tcx.basin.right_node.next;\r\n        }\r\n        if (tcx.basin.right_node === tcx.basin.bottom_node) {\r\n            // No valid basins\r\n            return;\r\n        }\r\n    \r\n        tcx.basin.width = tcx.basin.right_node.point.x - tcx.basin.left_node.point.x;\r\n        tcx.basin.left_highest = tcx.basin.left_node.point.y > tcx.basin.right_node.point.y;\r\n    \r\n        fillBasinReq(tcx, tcx.basin.bottom_node);\r\n    }\r\n    \r\n    /**\r\n     * Recursive algorithm to fill a Basin with triangles\r\n     *\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     * @param node - bottom_node\r\n     */\r\n    function fillBasinReq(tcx, node) {\r\n        // if shallow stop filling\r\n        if (isShallow(tcx, node)) {\r\n            return;\r\n        }\r\n    \r\n        fill(tcx, node);\r\n    \r\n        var o;\r\n        if (node.prev === tcx.basin.left_node && node.next === tcx.basin.right_node) {\r\n            return;\r\n        } else if (node.prev === tcx.basin.left_node) {\r\n            o = orient2d(node.point, node.next.point, node.next.next.point);\r\n            if (o === Orientation.CW) {\r\n                return;\r\n            }\r\n            node = node.next;\r\n        } else if (node.next === tcx.basin.right_node) {\r\n            o = orient2d(node.point, node.prev.point, node.prev.prev.point);\r\n            if (o === Orientation.CCW) {\r\n                return;\r\n            }\r\n            node = node.prev;\r\n        } else {\r\n            // Continue with the neighbor node with lowest Y value\r\n            if (node.prev.point.y < node.next.point.y) {\r\n                node = node.prev;\r\n            } else {\r\n                node = node.next;\r\n            }\r\n        }\r\n    \r\n        fillBasinReq(tcx, node);\r\n    }\r\n    \r\n    function isShallow(tcx, node) {\r\n        var height;\r\n        if (tcx.basin.left_highest) {\r\n            height = tcx.basin.left_node.point.y - node.point.y;\r\n        } else {\r\n            height = tcx.basin.right_node.point.y - node.point.y;\r\n        }\r\n    \r\n        // if shallow stop filling\r\n        if (tcx.basin.width > height) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    function fillEdgeEvent(tcx, edge, node) {\r\n        if (tcx.edge_event.right) {\r\n            fillRightAboveEdgeEvent(tcx, edge, node);\r\n        } else {\r\n            fillLeftAboveEdgeEvent(tcx, edge, node);\r\n        }\r\n    }\r\n    \r\n    function fillRightAboveEdgeEvent(tcx, edge, node) {\r\n        while (node.next.point.x < edge.p.x) {\r\n            // Check if next node is below the edge\r\n            if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {\r\n                fillRightBelowEdgeEvent(tcx, edge, node);\r\n            } else {\r\n                node = node.next;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function fillRightBelowEdgeEvent(tcx, edge, node) {\r\n        if (node.point.x < edge.p.x) {\r\n            if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\r\n                // Concave\r\n                fillRightConcaveEdgeEvent(tcx, edge, node);\r\n            } else {\r\n                // Convex\r\n                fillRightConvexEdgeEvent(tcx, edge, node);\r\n                // Retry this one\r\n                fillRightBelowEdgeEvent(tcx, edge, node);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function fillRightConcaveEdgeEvent(tcx, edge, node) {\r\n        fill(tcx, node.next);\r\n        if (node.next.point !== edge.p) {\r\n            // Next above or below edge?\r\n            if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {\r\n                // Below\r\n                if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\r\n                    // Next is concave\r\n                    fillRightConcaveEdgeEvent(tcx, edge, node);\r\n                } else {\r\n                    // Next is convex\r\n                    /* jshint noempty:false */\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function fillRightConvexEdgeEvent(tcx, edge, node) {\r\n        // Next concave or convex?\r\n        if (orient2d(node.next.point, node.next.next.point, node.next.next.next.point) === Orientation.CCW) {\r\n            // Concave\r\n            fillRightConcaveEdgeEvent(tcx, edge, node.next);\r\n        } else {\r\n            // Convex\r\n            // Next above or below edge?\r\n            if (orient2d(edge.q, node.next.next.point, edge.p) === Orientation.CCW) {\r\n                // Below\r\n                fillRightConvexEdgeEvent(tcx, edge, node.next);\r\n            } else {\r\n                // Above\r\n                /* jshint noempty:false */\r\n            }\r\n        }\r\n    }\r\n    \r\n    function fillLeftAboveEdgeEvent(tcx, edge, node) {\r\n        while (node.prev.point.x > edge.p.x) {\r\n            // Check if next node is below the edge\r\n            if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {\r\n                fillLeftBelowEdgeEvent(tcx, edge, node);\r\n            } else {\r\n                node = node.prev;\r\n            }\r\n        }\r\n    }\r\n    \r\n    function fillLeftBelowEdgeEvent(tcx, edge, node) {\r\n        if (node.point.x > edge.p.x) {\r\n            if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {\r\n                // Concave\r\n                fillLeftConcaveEdgeEvent(tcx, edge, node);\r\n            } else {\r\n                // Convex\r\n                fillLeftConvexEdgeEvent(tcx, edge, node);\r\n                // Retry this one\r\n                fillLeftBelowEdgeEvent(tcx, edge, node);\r\n            }\r\n        }\r\n    }\r\n    \r\n    function fillLeftConvexEdgeEvent(tcx, edge, node) {\r\n        // Next concave or convex?\r\n        if (orient2d(node.prev.point, node.prev.prev.point, node.prev.prev.prev.point) === Orientation.CW) {\r\n            // Concave\r\n            fillLeftConcaveEdgeEvent(tcx, edge, node.prev);\r\n        } else {\r\n            // Convex\r\n            // Next above or below edge?\r\n            if (orient2d(edge.q, node.prev.prev.point, edge.p) === Orientation.CW) {\r\n                // Below\r\n                fillLeftConvexEdgeEvent(tcx, edge, node.prev);\r\n            } else {\r\n                // Above\r\n                /* jshint noempty:false */\r\n            }\r\n        }\r\n    }\r\n    \r\n    function fillLeftConcaveEdgeEvent(tcx, edge, node) {\r\n        fill(tcx, node.prev);\r\n        if (node.prev.point !== edge.p) {\r\n            // Next above or below edge?\r\n            if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {\r\n                // Below\r\n                if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {\r\n                    // Next is concave\r\n                    fillLeftConcaveEdgeEvent(tcx, edge, node);\r\n                } else {\r\n                    // Next is convex\r\n                    /* jshint noempty:false */\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    function flipEdgeEvent(tcx, ep, eq, t, p) {\r\n        var ot = t.neighborAcross(p);\r\n        assert(ot, \"FLIP failed due to missing triangle!\");\r\n    \r\n        var op = ot.oppositePoint(t, p);\r\n    \r\n        // Additional check from Java version (see issue #88)\r\n        if (t.getConstrainedEdgeAcross(p)) {\r\n            var index = t.index(p);\r\n            throw new PointError(\"poly2tri Intersecting Constraints\",\r\n                    [p, op, t.getPoint((index + 1) % 3), t.getPoint((index + 2) % 3)]);\r\n        }\r\n    \r\n        if (inScanArea(p, t.pointCCW(p), t.pointCW(p), op)) {\r\n            // Lets rotate shared edge one vertex CW\r\n            rotateTrianglePair(t, p, ot, op);\r\n            tcx.mapTriangleToNodes(t);\r\n            tcx.mapTriangleToNodes(ot);\r\n    \r\n            // XXX: in the original C++ code for the next 2 lines, we are\r\n            // comparing point values (and not pointers). In this JavaScript\r\n            // code, we are comparing point references (pointers). This works\r\n            // because we can't have 2 different points with the same values.\r\n            // But to be really equivalent, we should use \"Point.equals\" here.\r\n            if (p === eq && op === ep) {\r\n                if (eq === tcx.edge_event.constrained_edge.q && ep === tcx.edge_event.constrained_edge.p) {\r\n                    t.markConstrainedEdgeByPoints(ep, eq);\r\n                    ot.markConstrainedEdgeByPoints(ep, eq);\r\n                    legalize(tcx, t);\r\n                    legalize(tcx, ot);\r\n                } else {\r\n                    // XXX: I think one of the triangles should be legalized here?\r\n                    /* jshint noempty:false */\r\n                }\r\n            } else {\r\n                var o = orient2d(eq, op, ep);\r\n                t = nextFlipTriangle(tcx, o, t, ot, p, op);\r\n                flipEdgeEvent(tcx, ep, eq, t, p);\r\n            }\r\n        } else {\r\n            var newP = nextFlipPoint(ep, eq, ot, op);\r\n            flipScanEdgeEvent(tcx, ep, eq, t, ot, newP);\r\n            edgeEventByPoints(tcx, ep, eq, t, p);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * After a flip we have two triangles and know that only one will still be\r\n     * intersecting the edge. So decide which to contiune with and legalize the other\r\n     *\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     * @param o - should be the result of an orient2d( eq, op, ep )\r\n     * @param t - triangle 1\r\n     * @param ot - triangle 2\r\n     * @param p - a point shared by both triangles\r\n     * @param op - another point shared by both triangles\r\n     * @return returns the triangle still intersecting the edge\r\n     */\r\n    function nextFlipTriangle(tcx, o, t, ot, p, op) {\r\n        var edge_index;\r\n        if (o === Orientation.CCW) {\r\n            // ot is not crossing edge after flip\r\n            edge_index = ot.edgeIndex(p, op);\r\n            ot.delaunay_edge[edge_index] = true;\r\n            legalize(tcx, ot);\r\n            ot.clearDelaunayEdges();\r\n            return t;\r\n        }\r\n    \r\n        // t is not crossing edge after flip\r\n        edge_index = t.edgeIndex(p, op);\r\n    \r\n        t.delaunay_edge[edge_index] = true;\r\n        legalize(tcx, t);\r\n        t.clearDelaunayEdges();\r\n        return ot;\r\n    }\r\n    \r\n    /**\r\n     * When we need to traverse from one triangle to the next we need\r\n     * the point in current triangle that is the opposite point to the next\r\n     * triangle.\r\n     */\r\n    function nextFlipPoint(ep, eq, ot, op) {\r\n        var o2d = orient2d(eq, op, ep);\r\n        if (o2d === Orientation.CW) {\r\n            // Right\r\n            return ot.pointCCW(op);\r\n        } else if (o2d === Orientation.CCW) {\r\n            // Left\r\n            return ot.pointCW(op);\r\n        } else {\r\n            throw new PointError(\"poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!\", [eq, op, ep]);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Scan part of the FlipScan algorithm<br>\r\n     * When a triangle pair isn't flippable we will scan for the next\r\n     * point that is inside the flip triangle scan area. When found\r\n     * we generate a new flipEdgeEvent\r\n     *\r\n     * @param {!SweepContext} tcx - SweepContext object\r\n     * @param ep - last point on the edge we are traversing\r\n     * @param eq - first point on the edge we are traversing\r\n     * @param {!Triangle} flip_triangle - the current triangle sharing the point eq with edge\r\n     * @param t\r\n     * @param p\r\n     */\r\n    function flipScanEdgeEvent(tcx, ep, eq, flip_triangle, t, p) {\r\n        var ot = t.neighborAcross(p);\r\n        assert(ot, \"FLIP failed due to missing triangle\");\r\n    \r\n        var op = ot.oppositePoint(t, p);\r\n    \r\n        if (inScanArea(eq, flip_triangle.pointCCW(eq), flip_triangle.pointCW(eq), op)) {\r\n            // flip with new edge op.eq\r\n            flipEdgeEvent(tcx, eq, op, ot, op);\r\n        } else {\r\n            var newP = nextFlipPoint(ep, eq, ot, op);\r\n            flipScanEdgeEvent(tcx, ep, eq, flip_triangle, ot, newP);\r\n        }\r\n    }\r\n    \r\n    \r\n    // ----------------------------------------------------------------------Exports\r\n    \r\n    exports.triangulate = triangulate;\r\n    \r\n    },{\"./advancingfront\":2,\"./assert\":3,\"./pointerror\":5,\"./triangle\":9,\"./utils\":10}],8:[function(require,module,exports){\r\n    /*\r\n     * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n     * http://code.google.com/p/poly2tri/\r\n     * \r\n     * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n     * https://github.com/r3mi/poly2tri.js\r\n     * \r\n     * All rights reserved.\r\n     * \r\n     * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n     */\r\n    \r\n    /* jshint maxcomplexity:6 */\r\n    \r\n    \"use strict\";\r\n    \r\n    \r\n    /*\r\n     * Note\r\n     * ====\r\n     * the structure of this JavaScript version of poly2tri intentionally follows\r\n     * as closely as possible the structure of the reference C++ version, to make it \r\n     * easier to keep the 2 versions in sync.\r\n     */\r\n    \r\n    var PointError = require('./pointerror');\r\n    var Point = require('./point');\r\n    var Triangle = require('./triangle');\r\n    var sweep = require('./sweep');\r\n    var AdvancingFront = require('./advancingfront');\r\n    var Node = AdvancingFront.Node;\r\n    \r\n    \r\n    // ------------------------------------------------------------------------utils\r\n    \r\n    /**\r\n     * Initial triangle factor, seed triangle will extend 30% of\r\n     * PointSet width to both left and right.\r\n     * @private\r\n     * @const\r\n     */\r\n    var kAlpha = 0.3;\r\n    \r\n    \r\n    // -------------------------------------------------------------------------Edge\r\n    /**\r\n     * Represents a simple polygon's edge\r\n     * @constructor\r\n     * @struct\r\n     * @private\r\n     * @param {Point} p1\r\n     * @param {Point} p2\r\n     * @throw {PointError} if p1 is same as p2\r\n     */\r\n    var Edge = function(p1, p2) {\r\n        this.p = p1;\r\n        this.q = p2;\r\n    \r\n        if (p1.y > p2.y) {\r\n            this.q = p1;\r\n            this.p = p2;\r\n        } else if (p1.y === p2.y) {\r\n            if (p1.x > p2.x) {\r\n                this.q = p1;\r\n                this.p = p2;\r\n            } else if (p1.x === p2.x) {\r\n                throw new PointError('poly2tri Invalid Edge constructor: repeated points!', [p1]);\r\n            }\r\n        }\r\n    \r\n        if (!this.q._p2t_edge_list) {\r\n            this.q._p2t_edge_list = [];\r\n        }\r\n        this.q._p2t_edge_list.push(this);\r\n    };\r\n    \r\n    \r\n    // ------------------------------------------------------------------------Basin\r\n    /**\r\n     * @constructor\r\n     * @struct\r\n     * @private\r\n     */\r\n    var Basin = function() {\r\n        /** @type {Node} */\r\n        this.left_node = null;\r\n        /** @type {Node} */\r\n        this.bottom_node = null;\r\n        /** @type {Node} */\r\n        this.right_node = null;\r\n        /** @type {number} */\r\n        this.width = 0.0;\r\n        /** @type {boolean} */\r\n        this.left_highest = false;\r\n    };\r\n    \r\n    Basin.prototype.clear = function() {\r\n        this.left_node = null;\r\n        this.bottom_node = null;\r\n        this.right_node = null;\r\n        this.width = 0.0;\r\n        this.left_highest = false;\r\n    };\r\n    \r\n    // --------------------------------------------------------------------EdgeEvent\r\n    /**\r\n     * @constructor\r\n     * @struct\r\n     * @private\r\n     */\r\n    var EdgeEvent = function() {\r\n        /** @type {Edge} */\r\n        this.constrained_edge = null;\r\n        /** @type {boolean} */\r\n        this.right = false;\r\n    };\r\n    \r\n    // ----------------------------------------------------SweepContext (public API)\r\n    /**\r\n     * SweepContext constructor option\r\n     * @typedef {Object} SweepContextOptions\r\n     * @property {boolean=} cloneArrays - if <code>true</code>, do a shallow copy of the Array parameters\r\n     *                  (contour, holes). Points inside arrays are never copied.\r\n     *                  Default is <code>false</code> : keep a reference to the array arguments,\r\n     *                  who will be modified in place.\r\n     */\r\n    /**\r\n     * Constructor for the triangulation context.\r\n     * It accepts a simple polyline (with non repeating points), \r\n     * which defines the constrained edges.\r\n     *\r\n     * @example\r\n     *          var contour = [\r\n     *              new poly2tri.Point(100, 100),\r\n     *              new poly2tri.Point(100, 300),\r\n     *              new poly2tri.Point(300, 300),\r\n     *              new poly2tri.Point(300, 100)\r\n     *          ];\r\n     *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});\r\n     * @example\r\n     *          var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\r\n     *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});\r\n     * @constructor\r\n     * @public\r\n     * @struct\r\n     * @param {Array.<XY>} contour - array of point objects. The points can be either {@linkcode Point} instances,\r\n     *          or any \"Point like\" custom class with <code>{x, y}</code> attributes.\r\n     * @param {SweepContextOptions=} options - constructor options\r\n     */\r\n    var SweepContext = function(contour, options) {\r\n        options = options || {};\r\n        this.triangles_ = [];\r\n        this.map_ = [];\r\n        this.points_ = (options.cloneArrays ? contour.slice(0) : contour);\r\n        this.edge_list = [];\r\n    \r\n        // Bounding box of all points. Computed at the start of the triangulation, \r\n        // it is stored in case it is needed by the caller.\r\n        this.pmin_ = this.pmax_ = null;\r\n    \r\n        /**\r\n         * Advancing front\r\n         * @private\r\n         * @type {AdvancingFront}\r\n         */\r\n        this.front_ = null;\r\n    \r\n        /**\r\n         * head point used with advancing front\r\n         * @private\r\n         * @type {Point}\r\n         */\r\n        this.head_ = null;\r\n    \r\n        /**\r\n         * tail point used with advancing front\r\n         * @private\r\n         * @type {Point}\r\n         */\r\n        this.tail_ = null;\r\n    \r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.af_head_ = null;\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.af_middle_ = null;\r\n        /**\r\n         * @private\r\n         * @type {Node}\r\n         */\r\n        this.af_tail_ = null;\r\n    \r\n        this.basin = new Basin();\r\n        this.edge_event = new EdgeEvent();\r\n    \r\n        this.initEdges(this.points_);\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Add a hole to the constraints\r\n     * @example\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      var hole = [\r\n     *          new poly2tri.Point(200, 200),\r\n     *          new poly2tri.Point(200, 250),\r\n     *          new poly2tri.Point(250, 250)\r\n     *      ];\r\n     *      swctx.addHole(hole);\r\n     * @example\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      swctx.addHole([{x:200, y:200}, {x:200, y:250}, {x:250, y:250}]);\r\n     * @public\r\n     * @param {Array.<XY>} polyline - array of \"Point like\" objects with {x,y}\r\n     */\r\n    SweepContext.prototype.addHole = function(polyline) {\r\n        this.initEdges(polyline);\r\n        var i, len = polyline.length;\r\n        for (i = 0; i < len; i++) {\r\n            this.points_.push(polyline[i]);\r\n        }\r\n        return this; // for chaining\r\n    };\r\n    \r\n    /**\r\n     * For backward compatibility\r\n     * @function\r\n     * @deprecated use {@linkcode SweepContext#addHole} instead\r\n     */\r\n    SweepContext.prototype.AddHole = SweepContext.prototype.addHole;\r\n    \r\n    \r\n    /**\r\n     * Add several holes to the constraints\r\n     * @example\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      var holes = [\r\n     *          [ new poly2tri.Point(200, 200), new poly2tri.Point(200, 250), new poly2tri.Point(250, 250) ],\r\n     *          [ new poly2tri.Point(300, 300), new poly2tri.Point(300, 350), new poly2tri.Point(350, 350) ]\r\n     *      ];\r\n     *      swctx.addHoles(holes);\r\n     * @example\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      var holes = [\r\n     *          [{x:200, y:200}, {x:200, y:250}, {x:250, y:250}],\r\n     *          [{x:300, y:300}, {x:300, y:350}, {x:350, y:350}]\r\n     *      ];\r\n     *      swctx.addHoles(holes);\r\n     * @public\r\n     * @param {Array.<Array.<XY>>} holes - array of array of \"Point like\" objects with {x,y}\r\n     */\r\n    // Method added in the JavaScript version (was not present in the c++ version)\r\n    SweepContext.prototype.addHoles = function(holes) {\r\n        var i, len = holes.length;\r\n        for (i = 0; i < len; i++) {\r\n            this.initEdges(holes[i]);\r\n        }\r\n        this.points_ = this.points_.concat.apply(this.points_, holes);\r\n        return this; // for chaining\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Add a Steiner point to the constraints\r\n     * @example\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      var point = new poly2tri.Point(150, 150);\r\n     *      swctx.addPoint(point);\r\n     * @example\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      swctx.addPoint({x:150, y:150});\r\n     * @public\r\n     * @param {XY} point - any \"Point like\" object with {x,y}\r\n     */\r\n    SweepContext.prototype.addPoint = function(point) {\r\n        this.points_.push(point);\r\n        return this; // for chaining\r\n    };\r\n    \r\n    /**\r\n     * For backward compatibility\r\n     * @function\r\n     * @deprecated use {@linkcode SweepContext#addPoint} instead\r\n     */\r\n    SweepContext.prototype.AddPoint = SweepContext.prototype.addPoint;\r\n    \r\n    \r\n    /**\r\n     * Add several Steiner points to the constraints\r\n     * @example\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      var points = [\r\n     *          new poly2tri.Point(150, 150),\r\n     *          new poly2tri.Point(200, 250),\r\n     *          new poly2tri.Point(250, 250)\r\n     *      ];\r\n     *      swctx.addPoints(points);\r\n     * @example\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      swctx.addPoints([{x:150, y:150}, {x:200, y:250}, {x:250, y:250}]);\r\n     * @public\r\n     * @param {Array.<XY>} points - array of \"Point like\" object with {x,y}\r\n     */\r\n    // Method added in the JavaScript version (was not present in the c++ version)\r\n    SweepContext.prototype.addPoints = function(points) {\r\n        this.points_ = this.points_.concat(points);\r\n        return this; // for chaining\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Triangulate the polygon with holes and Steiner points.\r\n     * Do this AFTER you've added the polyline, holes, and Steiner points\r\n     * @example\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      swctx.triangulate();\r\n     *      var triangles = swctx.getTriangles();\r\n     * @public\r\n     */\r\n    // Shortcut method for sweep.triangulate(SweepContext).\r\n    // Method added in the JavaScript version (was not present in the c++ version)\r\n    SweepContext.prototype.triangulate = function() {\r\n        sweep.triangulate(this);\r\n        return this; // for chaining\r\n    };\r\n    \r\n    \r\n    /**\r\n     * Get the bounding box of the provided constraints (contour, holes and \r\n     * Steinter points). Warning : these values are not available if the triangulation \r\n     * has not been done yet.\r\n     * @public\r\n     * @returns {{min:Point,max:Point}} object with 'min' and 'max' Point\r\n     */\r\n    // Method added in the JavaScript version (was not present in the c++ version)\r\n    SweepContext.prototype.getBoundingBox = function() {\r\n        return {min: this.pmin_, max: this.pmax_};\r\n    };\r\n    \r\n    /**\r\n     * Get result of triangulation.\r\n     * The output triangles have vertices which are references\r\n     * to the initial input points (not copies): any custom fields in the\r\n     * initial points can be retrieved in the output triangles.\r\n     * @example\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      swctx.triangulate();\r\n     *      var triangles = swctx.getTriangles();\r\n     * @example\r\n     *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      swctx.triangulate();\r\n     *      var triangles = swctx.getTriangles();\r\n     *      typeof triangles[0].getPoint(0).id\r\n     *      // → \"number\"\r\n     * @public\r\n     * @returns {array<Triangle>}   array of triangles\r\n     */\r\n    SweepContext.prototype.getTriangles = function() {\r\n        return this.triangles_;\r\n    };\r\n    \r\n    /**\r\n     * For backward compatibility\r\n     * @function\r\n     * @deprecated use {@linkcode SweepContext#getTriangles} instead\r\n     */\r\n    SweepContext.prototype.GetTriangles = SweepContext.prototype.getTriangles;\r\n    \r\n    \r\n    // ---------------------------------------------------SweepContext (private API)\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.front = function() {\r\n        return this.front_;\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.pointCount = function() {\r\n        return this.points_.length;\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.head = function() {\r\n        return this.head_;\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.setHead = function(p1) {\r\n        this.head_ = p1;\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.tail = function() {\r\n        return this.tail_;\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.setTail = function(p1) {\r\n        this.tail_ = p1;\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.getMap = function() {\r\n        return this.map_;\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.initTriangulation = function() {\r\n        var xmax = this.points_[0].x;\r\n        var xmin = this.points_[0].x;\r\n        var ymax = this.points_[0].y;\r\n        var ymin = this.points_[0].y;\r\n    \r\n        // Calculate bounds\r\n        var i, len = this.points_.length;\r\n        for (i = 1; i < len; i++) {\r\n            var p = this.points_[i];\r\n            /* jshint expr:true */\r\n            (p.x > xmax) && (xmax = p.x);\r\n            (p.x < xmin) && (xmin = p.x);\r\n            (p.y > ymax) && (ymax = p.y);\r\n            (p.y < ymin) && (ymin = p.y);\r\n        }\r\n        this.pmin_ = new Point(xmin, ymin);\r\n        this.pmax_ = new Point(xmax, ymax);\r\n    \r\n        var dx = kAlpha * (xmax - xmin);\r\n        var dy = kAlpha * (ymax - ymin);\r\n        this.head_ = new Point(xmax + dx, ymin - dy);\r\n        this.tail_ = new Point(xmin - dx, ymin - dy);\r\n    \r\n        // Sort points along y-axis\r\n        this.points_.sort(Point.compare);\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.initEdges = function(polyline, isOpen) {\r\n        var i, len = polyline.length, iEnd = isOpen ? polyline.length-1 : polyline.length;\r\n        for (i = 0; i < iEnd; ++i) {\r\n            this.edge_list.push(new Edge(polyline[i], polyline[(i + 1) % len]));\r\n        }\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.getPoint = function(index) {\r\n        return this.points_[index];\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.addToMap = function(triangle) {\r\n        this.map_.push(triangle);\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.locateNode = function(point) {\r\n        return this.front_.locateNode(point.x);\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.createAdvancingFront = function() {\r\n        var head;\r\n        var middle;\r\n        var tail;\r\n        // Initial triangle\r\n        var triangle = new Triangle(this.points_[0], this.tail_, this.head_);\r\n    \r\n        this.map_.push(triangle);\r\n    \r\n        head = new Node(triangle.getPoint(1), triangle);\r\n        middle = new Node(triangle.getPoint(0), triangle);\r\n        tail = new Node(triangle.getPoint(2));\r\n    \r\n        this.front_ = new AdvancingFront(head, tail);\r\n    \r\n        head.next = middle;\r\n        middle.next = tail;\r\n        middle.prev = head;\r\n        tail.prev = middle;\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.removeNode = function(node) {\r\n        // do nothing\r\n        /* jshint unused:false */\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.mapTriangleToNodes = function(t) {\r\n        for (var i = 0; i < 3; ++i) {\r\n            if (!t.getNeighbor(i)) {\r\n                var n = this.front_.locatePoint(t.pointCW(t.getPoint(i)));\r\n                if (n) {\r\n                    n.triangle = t;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    /** @private */\r\n    SweepContext.prototype.removeFromMap = function(triangle) {\r\n        var i, map = this.map_, len = map.length;\r\n        for (i = 0; i < len; i++) {\r\n            if (map[i] === triangle) {\r\n                map.splice(i, 1);\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Do a depth first traversal to collect triangles\r\n     * @private\r\n     * @param {Triangle} triangle start\r\n     */\r\n    SweepContext.prototype.meshClean = function(triangle) {\r\n        // New implementation avoids recursive calls and use a loop instead.\r\n        // Cf. issues # 57, 65 and 69.\r\n        var triangles = [triangle], t, i;\r\n        /* jshint boss:true */\r\n        while (t = triangles.pop()) {\r\n            if (!t.isInterior()) {\r\n                t.setInterior(true);\r\n                this.triangles_.push(t);\r\n                for (i = 0; i < 3; i++) {\r\n                    if (!t.constrained_edge[i]) {\r\n                        triangles.push(t.getNeighbor(i));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    \r\n    // ----------------------------------------------------------------------Exports\r\n    \r\n    module.exports = SweepContext;\r\n    \r\n    },{\"./advancingfront\":2,\"./point\":4,\"./pointerror\":5,\"./sweep\":7,\"./triangle\":9}],9:[function(require,module,exports){\r\n    /*\r\n     * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n     * http://code.google.com/p/poly2tri/\r\n     * \r\n     * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n     * https://github.com/r3mi/poly2tri.js\r\n     *\r\n     * All rights reserved.\r\n     * \r\n     * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n     */\r\n    \r\n    /* jshint maxcomplexity:10 */\r\n    \r\n    \"use strict\";\r\n    \r\n    \r\n    /*\r\n     * Note\r\n     * ====\r\n     * the structure of this JavaScript version of poly2tri intentionally follows\r\n     * as closely as possible the structure of the reference C++ version, to make it \r\n     * easier to keep the 2 versions in sync.\r\n     */\r\n    \r\n    var xy = require(\"./xy\");\r\n    \r\n    \r\n    // ---------------------------------------------------------------------Triangle\r\n    /**\r\n     * Triangle class.<br>\r\n     * Triangle-based data structures are known to have better performance than\r\n     * quad-edge structures.\r\n     * See: J. Shewchuk, \"Triangle: Engineering a 2D Quality Mesh Generator and\r\n     * Delaunay Triangulator\", \"Triangulations in CGAL\"\r\n     *\r\n     * @constructor\r\n     * @struct\r\n     * @param {!XY} pa  point object with {x,y}\r\n     * @param {!XY} pb  point object with {x,y}\r\n     * @param {!XY} pc  point object with {x,y}\r\n     */\r\n    var Triangle = function(a, b, c) {\r\n        /**\r\n         * Triangle points\r\n         * @private\r\n         * @type {Array.<XY>}\r\n         */\r\n        this.points_ = [a, b, c];\r\n    \r\n        /**\r\n         * Neighbor list\r\n         * @private\r\n         * @type {Array.<Triangle>}\r\n         */\r\n        this.neighbors_ = [null, null, null];\r\n    \r\n        /**\r\n         * Has this triangle been marked as an interior triangle?\r\n         * @private\r\n         * @type {boolean}\r\n         */\r\n        this.interior_ = false;\r\n    \r\n        /**\r\n         * Flags to determine if an edge is a Constrained edge\r\n         * @private\r\n         * @type {Array.<boolean>}\r\n         */\r\n        this.constrained_edge = [false, false, false];\r\n    \r\n        /**\r\n         * Flags to determine if an edge is a Delauney edge\r\n         * @private\r\n         * @type {Array.<boolean>}\r\n         */\r\n        this.delaunay_edge = [false, false, false];\r\n    };\r\n    \r\n    var p2s = xy.toString;\r\n    /**\r\n     * For pretty printing ex. <code>\"[(5;42)(10;20)(21;30)]\"</code>.\r\n     * @public\r\n     * @return {string}\r\n     */\r\n    Triangle.prototype.toString = function() {\r\n        return (\"[\" + p2s(this.points_[0]) + p2s(this.points_[1]) + p2s(this.points_[2]) + \"]\");\r\n    };\r\n    \r\n    /**\r\n     * Get one vertice of the triangle.\r\n     * The output triangles of a triangulation have vertices which are references\r\n     * to the initial input points (not copies): any custom fields in the\r\n     * initial points can be retrieved in the output triangles.\r\n     * @example\r\n     *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *      swctx.triangulate();\r\n     *      var triangles = swctx.getTriangles();\r\n     *      typeof triangles[0].getPoint(0).id\r\n     *      // → \"number\"\r\n     * @param {number} index - vertice index: 0, 1 or 2\r\n     * @public\r\n     * @returns {XY}\r\n     */\r\n    Triangle.prototype.getPoint = function(index) {\r\n        return this.points_[index];\r\n    };\r\n    \r\n    /**\r\n     * For backward compatibility\r\n     * @function\r\n     * @deprecated use {@linkcode Triangle#getPoint} instead\r\n     */\r\n    Triangle.prototype.GetPoint = Triangle.prototype.getPoint;\r\n    \r\n    /**\r\n     * Get all 3 vertices of the triangle as an array\r\n     * @public\r\n     * @return {Array.<XY>}\r\n     */\r\n    // Method added in the JavaScript version (was not present in the c++ version)\r\n    Triangle.prototype.getPoints = function() {\r\n        return this.points_;\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * @param {number} index\r\n     * @returns {?Triangle}\r\n     */\r\n    Triangle.prototype.getNeighbor = function(index) {\r\n        return this.neighbors_[index];\r\n    };\r\n    \r\n    /**\r\n     * Test if this Triangle contains the Point object given as parameter as one of its vertices.\r\n     * Only point references are compared, not values.\r\n     * @public\r\n     * @param {XY} point - point object with {x,y}\r\n     * @return {boolean} <code>True</code> if the Point object is of the Triangle's vertices,\r\n     *         <code>false</code> otherwise.\r\n     */\r\n    Triangle.prototype.containsPoint = function(point) {\r\n        var points = this.points_;\r\n        // Here we are comparing point references, not values\r\n        return (point === points[0] || point === points[1] || point === points[2]);\r\n    };\r\n    \r\n    /**\r\n     * Test if this Triangle contains the Edge object given as parameter as its\r\n     * bounding edges. Only point references are compared, not values.\r\n     * @private\r\n     * @param {Edge} edge\r\n     * @return {boolean} <code>True</code> if the Edge object is of the Triangle's bounding\r\n     *         edges, <code>false</code> otherwise.\r\n     */\r\n    Triangle.prototype.containsEdge = function(edge) {\r\n        return this.containsPoint(edge.p) && this.containsPoint(edge.q);\r\n    };\r\n    \r\n    /**\r\n     * Test if this Triangle contains the two Point objects given as parameters among its vertices.\r\n     * Only point references are compared, not values.\r\n     * @param {XY} p1 - point object with {x,y}\r\n     * @param {XY} p2 - point object with {x,y}\r\n     * @return {boolean}\r\n     */\r\n    Triangle.prototype.containsPoints = function(p1, p2) {\r\n        return this.containsPoint(p1) && this.containsPoint(p2);\r\n    };\r\n    \r\n    /**\r\n     * Has this triangle been marked as an interior triangle?\r\n     * @returns {boolean}\r\n     */\r\n    Triangle.prototype.isInterior = function() {\r\n        return this.interior_;\r\n    };\r\n    \r\n    /**\r\n     * Mark this triangle as an interior triangle\r\n     * @private\r\n     * @param {boolean} interior\r\n     * @returns {Triangle} this\r\n     */\r\n    Triangle.prototype.setInterior = function(interior) {\r\n        this.interior_ = interior;\r\n        return this;\r\n    };\r\n    \r\n    /**\r\n     * Update neighbor pointers.\r\n     * @private\r\n     * @param {XY} p1 - point object with {x,y}\r\n     * @param {XY} p2 - point object with {x,y}\r\n     * @param {Triangle} t Triangle object.\r\n     * @throws {Error} if can't find objects\r\n     */\r\n    Triangle.prototype.markNeighborPointers = function(p1, p2, t) {\r\n        var points = this.points_;\r\n        // Here we are comparing point references, not values\r\n        if ((p1 === points[2] && p2 === points[1]) || (p1 === points[1] && p2 === points[2])) {\r\n            this.neighbors_[0] = t;\r\n        } else if ((p1 === points[0] && p2 === points[2]) || (p1 === points[2] && p2 === points[0])) {\r\n            this.neighbors_[1] = t;\r\n        } else if ((p1 === points[0] && p2 === points[1]) || (p1 === points[1] && p2 === points[0])) {\r\n            this.neighbors_[2] = t;\r\n        } else {\r\n            throw new Error('poly2tri Invalid Triangle.markNeighborPointers() call');\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Exhaustive search to update neighbor pointers\r\n     * @private\r\n     * @param {!Triangle} t\r\n     */\r\n    Triangle.prototype.markNeighbor = function(t) {\r\n        var points = this.points_;\r\n        if (t.containsPoints(points[1], points[2])) {\r\n            this.neighbors_[0] = t;\r\n            t.markNeighborPointers(points[1], points[2], this);\r\n        } else if (t.containsPoints(points[0], points[2])) {\r\n            this.neighbors_[1] = t;\r\n            t.markNeighborPointers(points[0], points[2], this);\r\n        } else if (t.containsPoints(points[0], points[1])) {\r\n            this.neighbors_[2] = t;\r\n            t.markNeighborPointers(points[0], points[1], this);\r\n        }\r\n    };\r\n    \r\n    \r\n    Triangle.prototype.clearNeighbors = function() {\r\n        this.neighbors_[0] = null;\r\n        this.neighbors_[1] = null;\r\n        this.neighbors_[2] = null;\r\n    };\r\n    \r\n    Triangle.prototype.clearDelaunayEdges = function() {\r\n        this.delaunay_edge[0] = false;\r\n        this.delaunay_edge[1] = false;\r\n        this.delaunay_edge[2] = false;\r\n    };\r\n    \r\n    /**\r\n     * Returns the point clockwise to the given point.\r\n     * @private\r\n     * @param {XY} p - point object with {x,y}\r\n     */\r\n    Triangle.prototype.pointCW = function(p) {\r\n        var points = this.points_;\r\n        // Here we are comparing point references, not values\r\n        if (p === points[0]) {\r\n            return points[2];\r\n        } else if (p === points[1]) {\r\n            return points[0];\r\n        } else if (p === points[2]) {\r\n            return points[1];\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Returns the point counter-clockwise to the given point.\r\n     * @private\r\n     * @param {XY} p - point object with {x,y}\r\n     */\r\n    Triangle.prototype.pointCCW = function(p) {\r\n        var points = this.points_;\r\n        // Here we are comparing point references, not values\r\n        if (p === points[0]) {\r\n            return points[1];\r\n        } else if (p === points[1]) {\r\n            return points[2];\r\n        } else if (p === points[2]) {\r\n            return points[0];\r\n        } else {\r\n            return null;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Returns the neighbor clockwise to given point.\r\n     * @private\r\n     * @param {XY} p - point object with {x,y}\r\n     */\r\n    Triangle.prototype.neighborCW = function(p) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            return this.neighbors_[1];\r\n        } else if (p === this.points_[1]) {\r\n            return this.neighbors_[2];\r\n        } else {\r\n            return this.neighbors_[0];\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Returns the neighbor counter-clockwise to given point.\r\n     * @private\r\n     * @param {XY} p - point object with {x,y}\r\n     */\r\n    Triangle.prototype.neighborCCW = function(p) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            return this.neighbors_[2];\r\n        } else if (p === this.points_[1]) {\r\n            return this.neighbors_[0];\r\n        } else {\r\n            return this.neighbors_[1];\r\n        }\r\n    };\r\n    \r\n    Triangle.prototype.getConstrainedEdgeCW = function(p) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            return this.constrained_edge[1];\r\n        } else if (p === this.points_[1]) {\r\n            return this.constrained_edge[2];\r\n        } else {\r\n            return this.constrained_edge[0];\r\n        }\r\n    };\r\n    \r\n    Triangle.prototype.getConstrainedEdgeCCW = function(p) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            return this.constrained_edge[2];\r\n        } else if (p === this.points_[1]) {\r\n            return this.constrained_edge[0];\r\n        } else {\r\n            return this.constrained_edge[1];\r\n        }\r\n    };\r\n    \r\n    // Additional check from Java version (see issue #88)\r\n    Triangle.prototype.getConstrainedEdgeAcross = function(p) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            return this.constrained_edge[0];\r\n        } else if (p === this.points_[1]) {\r\n            return this.constrained_edge[1];\r\n        } else {\r\n            return this.constrained_edge[2];\r\n        }\r\n    };\r\n    \r\n    Triangle.prototype.setConstrainedEdgeCW = function(p, ce) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            this.constrained_edge[1] = ce;\r\n        } else if (p === this.points_[1]) {\r\n            this.constrained_edge[2] = ce;\r\n        } else {\r\n            this.constrained_edge[0] = ce;\r\n        }\r\n    };\r\n    \r\n    Triangle.prototype.setConstrainedEdgeCCW = function(p, ce) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            this.constrained_edge[2] = ce;\r\n        } else if (p === this.points_[1]) {\r\n            this.constrained_edge[0] = ce;\r\n        } else {\r\n            this.constrained_edge[1] = ce;\r\n        }\r\n    };\r\n    \r\n    Triangle.prototype.getDelaunayEdgeCW = function(p) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            return this.delaunay_edge[1];\r\n        } else if (p === this.points_[1]) {\r\n            return this.delaunay_edge[2];\r\n        } else {\r\n            return this.delaunay_edge[0];\r\n        }\r\n    };\r\n    \r\n    Triangle.prototype.getDelaunayEdgeCCW = function(p) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            return this.delaunay_edge[2];\r\n        } else if (p === this.points_[1]) {\r\n            return this.delaunay_edge[0];\r\n        } else {\r\n            return this.delaunay_edge[1];\r\n        }\r\n    };\r\n    \r\n    Triangle.prototype.setDelaunayEdgeCW = function(p, e) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            this.delaunay_edge[1] = e;\r\n        } else if (p === this.points_[1]) {\r\n            this.delaunay_edge[2] = e;\r\n        } else {\r\n            this.delaunay_edge[0] = e;\r\n        }\r\n    };\r\n    \r\n    Triangle.prototype.setDelaunayEdgeCCW = function(p, e) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            this.delaunay_edge[2] = e;\r\n        } else if (p === this.points_[1]) {\r\n            this.delaunay_edge[0] = e;\r\n        } else {\r\n            this.delaunay_edge[1] = e;\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * The neighbor across to given point.\r\n     * @private\r\n     * @param {XY} p - point object with {x,y}\r\n     * @returns {Triangle}\r\n     */\r\n    Triangle.prototype.neighborAcross = function(p) {\r\n        // Here we are comparing point references, not values\r\n        if (p === this.points_[0]) {\r\n            return this.neighbors_[0];\r\n        } else if (p === this.points_[1]) {\r\n            return this.neighbors_[1];\r\n        } else {\r\n            return this.neighbors_[2];\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * @param {!Triangle} t Triangle object.\r\n     * @param {XY} p - point object with {x,y}\r\n     */\r\n    Triangle.prototype.oppositePoint = function(t, p) {\r\n        var cw = t.pointCW(p);\r\n        return this.pointCW(cw);\r\n    };\r\n    \r\n    /**\r\n     * Legalize triangle by rotating clockwise around oPoint\r\n     * @private\r\n     * @param {XY} opoint - point object with {x,y}\r\n     * @param {XY} npoint - point object with {x,y}\r\n     * @throws {Error} if oPoint can not be found\r\n     */\r\n    Triangle.prototype.legalize = function(opoint, npoint) {\r\n        var points = this.points_;\r\n        // Here we are comparing point references, not values\r\n        if (opoint === points[0]) {\r\n            points[1] = points[0];\r\n            points[0] = points[2];\r\n            points[2] = npoint;\r\n        } else if (opoint === points[1]) {\r\n            points[2] = points[1];\r\n            points[1] = points[0];\r\n            points[0] = npoint;\r\n        } else if (opoint === points[2]) {\r\n            points[0] = points[2];\r\n            points[2] = points[1];\r\n            points[1] = npoint;\r\n        } else {\r\n            throw new Error('poly2tri Invalid Triangle.legalize() call');\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Returns the index of a point in the triangle. \r\n     * The point *must* be a reference to one of the triangle's vertices.\r\n     * @private\r\n     * @param {XY} p - point object with {x,y}\r\n     * @returns {number} index 0, 1 or 2\r\n     * @throws {Error} if p can not be found\r\n     */\r\n    Triangle.prototype.index = function(p) {\r\n        var points = this.points_;\r\n        // Here we are comparing point references, not values\r\n        if (p === points[0]) {\r\n            return 0;\r\n        } else if (p === points[1]) {\r\n            return 1;\r\n        } else if (p === points[2]) {\r\n            return 2;\r\n        } else {\r\n            throw new Error('poly2tri Invalid Triangle.index() call');\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * @private\r\n     * @param {XY} p1 - point object with {x,y}\r\n     * @param {XY} p2 - point object with {x,y}\r\n     * @return {number} index 0, 1 or 2, or -1 if errror\r\n     */\r\n    Triangle.prototype.edgeIndex = function(p1, p2) {\r\n        var points = this.points_;\r\n        // Here we are comparing point references, not values\r\n        if (p1 === points[0]) {\r\n            if (p2 === points[1]) {\r\n                return 2;\r\n            } else if (p2 === points[2]) {\r\n                return 1;\r\n            }\r\n        } else if (p1 === points[1]) {\r\n            if (p2 === points[2]) {\r\n                return 0;\r\n            } else if (p2 === points[0]) {\r\n                return 2;\r\n            }\r\n        } else if (p1 === points[2]) {\r\n            if (p2 === points[0]) {\r\n                return 1;\r\n            } else if (p2 === points[1]) {\r\n                return 0;\r\n            }\r\n        }\r\n        return -1;\r\n    };\r\n    \r\n    /**\r\n     * Mark an edge of this triangle as constrained.\r\n     * @private\r\n     * @param {number} index - edge index\r\n     */\r\n    Triangle.prototype.markConstrainedEdgeByIndex = function(index) {\r\n        this.constrained_edge[index] = true;\r\n    };\r\n    /**\r\n     * Mark an edge of this triangle as constrained.\r\n     * @private\r\n     * @param {Edge} edge instance\r\n     */\r\n    Triangle.prototype.markConstrainedEdgeByEdge = function(edge) {\r\n        this.markConstrainedEdgeByPoints(edge.p, edge.q);\r\n    };\r\n    /**\r\n     * Mark an edge of this triangle as constrained.\r\n     * This method takes two Point instances defining the edge of the triangle.\r\n     * @private\r\n     * @param {XY} p - point object with {x,y}\r\n     * @param {XY} q - point object with {x,y}\r\n     */\r\n    Triangle.prototype.markConstrainedEdgeByPoints = function(p, q) {\r\n        var points = this.points_;\r\n        // Here we are comparing point references, not values        \r\n        if ((q === points[0] && p === points[1]) || (q === points[1] && p === points[0])) {\r\n            this.constrained_edge[2] = true;\r\n        } else if ((q === points[0] && p === points[2]) || (q === points[2] && p === points[0])) {\r\n            this.constrained_edge[1] = true;\r\n        } else if ((q === points[1] && p === points[2]) || (q === points[2] && p === points[1])) {\r\n            this.constrained_edge[0] = true;\r\n        }\r\n    };\r\n    \r\n    \r\n    // ---------------------------------------------------------Exports (public API)\r\n    \r\n    module.exports = Triangle;\r\n    \r\n    },{\"./xy\":11}],10:[function(require,module,exports){\r\n    /*\r\n     * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n     * http://code.google.com/p/poly2tri/\r\n     * \r\n     * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n     * https://github.com/r3mi/poly2tri.js\r\n     * \r\n     * All rights reserved.\r\n     * \r\n     * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n     */\r\n    \r\n    \"use strict\";\r\n    \r\n    /**\r\n     * Precision to detect repeated or collinear points\r\n     * @private\r\n     * @const {number}\r\n     * @default\r\n     */\r\n    var EPSILON = 1e-12;\r\n    exports.EPSILON = EPSILON;\r\n    \r\n    /**\r\n     * @private\r\n     * @enum {number}\r\n     * @readonly\r\n     */\r\n    var Orientation = {\r\n        \"CW\": 1,\r\n        \"CCW\": -1,\r\n        \"COLLINEAR\": 0\r\n    };\r\n    exports.Orientation = Orientation;\r\n    \r\n    \r\n    /**\r\n     * Formula to calculate signed area<br>\r\n     * Positive if CCW<br>\r\n     * Negative if CW<br>\r\n     * 0 if collinear<br>\r\n     * <pre>\r\n     * A[P1,P2,P3]  =  (x1*y2 - y1*x2) + (x2*y3 - y2*x3) + (x3*y1 - y3*x1)\r\n     *              =  (x1-x3)*(y2-y3) - (y1-y3)*(x2-x3)\r\n     * </pre>\r\n     *\r\n     * @private\r\n     * @param {!XY} pa  point object with {x,y}\r\n     * @param {!XY} pb  point object with {x,y}\r\n     * @param {!XY} pc  point object with {x,y}\r\n     * @return {Orientation}\r\n     */\r\n    function orient2d(pa, pb, pc) {\r\n        var detleft = (pa.x - pc.x) * (pb.y - pc.y);\r\n        var detright = (pa.y - pc.y) * (pb.x - pc.x);\r\n        var val = detleft - detright;\r\n        if (val > -(EPSILON) && val < (EPSILON)) {\r\n            return Orientation.COLLINEAR;\r\n        } else if (val > 0) {\r\n            return Orientation.CCW;\r\n        } else {\r\n            return Orientation.CW;\r\n        }\r\n    }\r\n    exports.orient2d = orient2d;\r\n    \r\n    \r\n    /**\r\n     *\r\n     * @private\r\n     * @param {!XY} pa  point object with {x,y}\r\n     * @param {!XY} pb  point object with {x,y}\r\n     * @param {!XY} pc  point object with {x,y}\r\n     * @param {!XY} pd  point object with {x,y}\r\n     * @return {boolean}\r\n     */\r\n    function inScanArea(pa, pb, pc, pd) {\r\n        var oadb = (pa.x - pb.x) * (pd.y - pb.y) - (pd.x - pb.x) * (pa.y - pb.y);\r\n        if (oadb >= -EPSILON) {\r\n            return false;\r\n        }\r\n    \r\n        var oadc = (pa.x - pc.x) * (pd.y - pc.y) - (pd.x - pc.x) * (pa.y - pc.y);\r\n        if (oadc <= EPSILON) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    exports.inScanArea = inScanArea;\r\n    \r\n    \r\n    /**\r\n     * Check if the angle between (pa,pb) and (pa,pc) is obtuse i.e. (angle > π/2 || angle < -π/2)\r\n     *\r\n     * @private\r\n     * @param {!XY} pa  point object with {x,y}\r\n     * @param {!XY} pb  point object with {x,y}\r\n     * @param {!XY} pc  point object with {x,y}\r\n     * @return {boolean} true if angle is obtuse\r\n     */\r\n    function isAngleObtuse(pa, pb, pc) {\r\n        var ax = pb.x - pa.x;\r\n        var ay = pb.y - pa.y;\r\n        var bx = pc.x - pa.x;\r\n        var by = pc.y - pa.y;\r\n        return (ax * bx + ay * by) < 0;\r\n    }\r\n    exports.isAngleObtuse = isAngleObtuse;\r\n    \r\n    \r\n    },{}],11:[function(require,module,exports){\r\n    /*\r\n     * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n     * http://code.google.com/p/poly2tri/\r\n     * \r\n     * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n     * https://github.com/r3mi/poly2tri.js\r\n     * \r\n     * All rights reserved.\r\n     * \r\n     * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n     */\r\n    \r\n    \"use strict\";\r\n    \r\n    /**\r\n     * The following functions operate on \"Point\" or any \"Point like\" object with {x,y},\r\n     * as defined by the {@link XY} type\r\n     * ({@link http://en.wikipedia.org/wiki/Duck_typing|duck typing}).\r\n     * @module\r\n     * @private\r\n     */\r\n    \r\n    /**\r\n     * poly2tri.js supports using custom point class instead of {@linkcode Point}.\r\n     * Any \"Point like\" object with <code>{x, y}</code> attributes is supported\r\n     * to initialize the SweepContext polylines and points\r\n     * ({@link http://en.wikipedia.org/wiki/Duck_typing|duck typing}).\r\n     *\r\n     * poly2tri.js might add extra fields to the point objects when computing the\r\n     * triangulation : they are prefixed with <code>_p2t_</code> to avoid collisions\r\n     * with fields in the custom class.\r\n     *\r\n     * @example\r\n     *      var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\r\n     *      var swctx = new poly2tri.SweepContext(contour);\r\n     *\r\n     * @typedef {Object} XY\r\n     * @property {number} x - x coordinate\r\n     * @property {number} y - y coordinate\r\n     */\r\n    \r\n    \r\n    /**\r\n     * Point pretty printing : prints x and y coordinates.\r\n     * @example\r\n     *      xy.toStringBase({x:5, y:42})\r\n     *      // → \"(5;42)\"\r\n     * @protected\r\n     * @param {!XY} p - point object with {x,y}\r\n     * @returns {string} <code>\"(x;y)\"</code>\r\n     */\r\n    function toStringBase(p) {\r\n        return (\"(\" + p.x + \";\" + p.y + \")\");\r\n    }\r\n    \r\n    /**\r\n     * Point pretty printing. Delegates to the point's custom \"toString()\" method if exists,\r\n     * else simply prints x and y coordinates.\r\n     * @example\r\n     *      xy.toString({x:5, y:42})\r\n     *      // → \"(5;42)\"\r\n     * @example\r\n     *      xy.toString({x:5,y:42,toString:function() {return this.x+\":\"+this.y;}})\r\n     *      // → \"5:42\"\r\n     * @param {!XY} p - point object with {x,y}\r\n     * @returns {string} <code>\"(x;y)\"</code>\r\n     */\r\n    function toString(p) {\r\n        // Try a custom toString first, and fallback to own implementation if none\r\n        var s = p.toString();\r\n        return (s === '[object Object]' ? toStringBase(p) : s);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Compare two points component-wise. Ordered by y axis first, then x axis.\r\n     * @param {!XY} a - point object with {x,y}\r\n     * @param {!XY} b - point object with {x,y}\r\n     * @return {number} <code>&lt; 0</code> if <code>a &lt; b</code>,\r\n     *         <code>&gt; 0</code> if <code>a &gt; b</code>, \r\n     *         <code>0</code> otherwise.\r\n     */\r\n    function compare(a, b) {\r\n        if (a.y === b.y) {\r\n            return a.x - b.x;\r\n        } else {\r\n            return a.y - b.y;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Test two Point objects for equality.\r\n     * @param {!XY} a - point object with {x,y}\r\n     * @param {!XY} b - point object with {x,y}\r\n     * @return {boolean} <code>True</code> if <code>a == b</code>, <code>false</code> otherwise.\r\n     */\r\n    function equals(a, b) {\r\n        return a.x === b.x && a.y === b.y;\r\n    }\r\n    \r\n    \r\n    module.exports = {\r\n        toString: toString,\r\n        toStringBase: toStringBase,\r\n        compare: compare,\r\n        equals: equals\r\n    };\r\n    \r\n    },{}]},{},[6])(6)\r\n    });\r\n","\nvar av = Autodesk.Viewing;\nvar avecg = AutodeskNamespace('Autodesk.Viewing.Extensions.CompGeom');\n\nfunction _export(m, ns) {\n    for (var prop in m) {\n        if (m.hasOwnProperty(prop)) {\n            //Export directly into the module (e.g. for node.js use, where LMV is used via require instead from global namespace)\n            module.exports[prop] = m[prop];\n\n            //Export into the desired viewer namespace\n            ns[prop] = m[prop];\n        }\n    }\n}\n\n_export(require(\"./contour-set\"), avecg);\n_export(require(\"./edge-set\"), avecg);\n_export(require(\"./dcel\"), avecg);\n_export(require(\"./fuzzy-math\"), avecg);\n_export(require(\"./quad-tree\"), avecg);\n_export(require(\"./x-box-box\"), avecg);\n_export(require(\"./x-box-plane\"), avecg);\n_export(require(\"./x-line-box\"), avecg);\n_export(require(\"./x-line-line\"), avecg);\n_export(require(\"./x-mesh-plane\"), avecg);\n_export(require(\"./x-plane-segment\"), avecg);\n_export(require(\"./x-triangle-plane\"), avecg);\n_export(require(\"./interval-tree\"), avecg);\n_export(require(\"./complex-polygon\"), avecg);\n_export(require(\"./point-list\"), avecg);\n_export(require(\"./poly2tri\"), avecg);\n\n/**\n * Computational geometry library extension\n */\nclass  CompGeomExtension extends av.Extension {\n\n    constructor(viewer, options) {\n        super(viewer, options);\n    }\n\n    load() { return true; }\n    unload() { return true; }\n    activate() { return true; }\n    deactivate() { return false; }\n}\n\n// The ExtensionManager requires an extension to be registered.\nav.theExtensionManager.registerExtension('Autodesk.CompGeom', CompGeomExtension);\n\n","    function IntervalNode() {\n\n        this.bbox = new THREE.Box2();\n        this.left = null;\n        this.right = null;\n        this.node_edges = [];\n    }\n\n    //Acceleration structure for point-in-polygon checking.\n    //Takes in a list of points and edges indexing into those points.\n    //The Point-in-polygon check is a simple even-odd test based on counting\n    //number of edges intersected by a ray from the input point to infinity.\n    export function IntervalTree(pts, edges, bbox) {\n\n        this.pts = pts;\n        this.edges = edges;\n        this.bbox = bbox;\n        this.pipResult = false;\n\n    }\n\n\n\n    IntervalTree.prototype.splitNode = function(node) {\n\n        if (node.bbox.min.y >= node.bbox.max.y)\n            return;\n\n        if (node.node_edges.length < 3)\n            return;\n\n        var split = 0.5 * (node.bbox.min.y + node.bbox.max.y);\n\n        //node.bbox.makeEmpty();\n\n        node.left = new IntervalNode();\n        node.right = new IntervalNode();\n\n        var pts = this.pts;\n        var ne = node.node_edges;\n        var remaining_node_edges = [];\n        var tmpPt = new THREE.Vector2();\n\n        for (var i=0; i<ne.length; i++) {\n\n            var e = this.edges[ne[i]];\n\n            var p1y = pts[e.p1].y;\n            var p2y = pts[e.p2].y;\n\n            if (p1y > p2y) {\n                var tmp = p1y;\n                p1y = p2y;\n                p2y = tmp;\n            }\n\n            var boxPtr = null;\n\n            if (p2y < split) {\n                node.left.node_edges.push(ne[i]);\n                boxPtr = node.left.bbox;\n            } else if (p1y > split) {\n                node.right.node_edges.push(ne[i]);\n                boxPtr = node.right.bbox;\n            } else {\n                remaining_node_edges.push(ne[i]);\n                //boxPtr = node.bbox;\n            }\n\n            if (boxPtr) {\n                tmpPt.set(pts[e.p1].x, pts[e.p1].y);\n                boxPtr.expandByPoint(tmpPt);\n                tmpPt.set(pts[e.p2].x, pts[e.p2].y);\n                boxPtr.expandByPoint(tmpPt);\n            }\n        }\n\n        node.node_edges = remaining_node_edges;\n\n        if (node.left.node_edges.length)\n            this.splitNode(node.left);\n        if (node.right.node_edges.length)\n            this.splitNode(node.right);\n    };\n\n\n    IntervalTree.prototype.build = function() {\n\n        this.root = new IntervalNode();\n\n        var edge_indices = this.root.node_edges;\n        for (var i=0; i<this.edges.length; i++)\n            edge_indices.push(i);\n\n        this.root.bbox.copy(this.bbox);\n\n        //split recursively\n        this.splitNode(this.root);\n    };\n\n\n\n\n    IntervalTree.prototype.pointInPolygonRec = function(node, x, y) {\n\n        if (node.bbox.min.y <= y && node.bbox.max.y >= y) {\n\n            var pts = this.pts;\n            var ne = node.node_edges;\n\n            for (var i=0, iEnd=ne.length; i<iEnd; i++) {\n\n                var e = this.edges[ne[i]];\n\n                // get the last point in the polygon\n                var p1 = pts[e.p1];\n                var vtx0X = p1.x;\n                var vtx0Y = p1.y;\n\n                // get test bit for above/below X axis\n                var yflag0 = (vtx0Y >= y);\n\n                var p2 = pts[e.p2];\n                var vtx1X = p2.x;\n                var vtx1Y = p2.y;\n\n                var yflag1 = (vtx1Y >= y);\n\n                // Check if endpoints straddle (are on opposite sides) of X axis\n                // (i.e. the Y's differ); if so, +X ray could intersect this edge.\n                // The old test also checked whether the endpoints are both to the\n                // right or to the left of the test point.  However, given the faster\n                // intersection point computation used below, this test was found to\n                // be a break-even proposition for most polygons and a loser for\n                // triangles (where 50% or more of the edges which survive this test\n                // will cross quadrants and so have to have the X intersection computed\n                // anyway).  I credit Joseph Samosky with inspiring me to try dropping\n                // the \"both left or both right\" part of my code.\n                if (yflag0 != yflag1)\n                {\n                    // Check intersection of pgon segment with +X ray.\n                    // Note if >= point's X; if so, the ray hits it.\n                    // The division operation is avoided for the \">=\" test by checking\n                    // the sign of the first vertex wrto the test point; idea inspired\n                    // by Joseph Samosky's and Mark Haigh-Hutchinson's different\n                    // polygon inclusion tests.\n                    if (((vtx1Y-y)*(vtx0X-vtx1X) >=\n                            (vtx1X-x)*(vtx0Y-vtx1Y)) == yflag1)\n                    {\n                        this.pipResult = !this.pipResult;\n                    }\n                }\n\n            }\n\n        }\n\n        var nl = node.left;\n        if (nl && nl.bbox.min.y <= y && nl.bbox.max.y >= y) {\n            this.pointInPolygonRec(nl, x, y);\n        }\n\n        var nr = node.right;\n        if (nr && nr.bbox.min.y <= y && nr.bbox.max.y >= y) {\n            this.pointInPolygonRec(nr, x, y);\n        }\n\n    };\n\n    IntervalTree.prototype.pointInPolygon = function(x, y) {\n\n          this.pipResult = false;\n\n          this.pointInPolygonRec(this.root, x, y);\n\n          return this.pipResult;\n\n    };\n","import { IntervalTree } from \"./interval-tree\";\r\nimport { UniquePointList } from \"./point-list\";\r\nimport { ComplexPolygon } from \"./complex-polygon\";\r\n\r\n    var avp = Autodesk.Viewing.Private;\r\n\r\n    //Functionality for converting a list of two-point line segments into a connected\r\n    //set of (hopefully) closed contour lines. The contour set is then used\r\n    //for triangulation.\r\n    //This data structure assumes there are no intersecting edges (use the DCEL if there are, or you need fully-connected topology).\r\n    export class EdgeSet {\r\n\r\n            constructor(edges, bbox, precisionTolerance) {\r\n\r\n            this.edges = edges;\r\n            this.bbox = bbox;\r\n\r\n            this.verts = new UniquePointList(bbox, precisionTolerance);\r\n            this.polygon = null;\r\n        }\r\n\r\n\r\n        getPointIndex(px, py) {\r\n\r\n            let v = this.verts.findOrAddPoint(px, py);\r\n\r\n            return v.id;\r\n        }\r\n\r\n        snapEdges() {\r\n\r\n            for (var i=0; i<this.edges.length; i++) {\r\n\r\n                var e = this.edges[i];\r\n\r\n                e.p1 = this.getPointIndex(e.v1.x, e.v1.y);\r\n                e.p2 = this.getPointIndex(e.v2.x, e.v2.y);\r\n            }\r\n        }\r\n\r\n        sanitizeEdges() {\r\n            var edgeSet = {};\r\n            var sanitizedEdges = [];\r\n\r\n            for (var i = 0, len = this.edges.length; i < len; i++) {\r\n                var e = this.edges[i];\r\n                if (e.p1 === e.p2) {\r\n                    continue;\r\n                }\r\n\r\n                var key = Math.min(e.p1, e.p2) + ':' + Math.max(e.p1, e.p2);\r\n                if (edgeSet[key] !== true) {\r\n                    edgeSet[key] = true;\r\n                    sanitizedEdges.push(e);\r\n                }\r\n            }\r\n\r\n            this.edges = sanitizedEdges;\r\n        }\r\n\r\n\r\n        stitchContours() {\r\n\r\n            this.contours = [];\r\n\r\n            //Create jump table from edge to edge\r\n            //and back\r\n            var edge_table = {};\r\n\r\n            for (var i=0; i<this.edges.length; i++) {\r\n                var e = this.edges[i];\r\n\r\n                if (e.p1 === e.p2)\r\n                    continue;\r\n\r\n                if (edge_table[e.p1] !== undefined)\r\n                    edge_table[e.p1].push(e.p2);\r\n                else\r\n                    edge_table[e.p1] = [e.p2];\r\n\r\n                if (edge_table[e.p2] !== undefined)\r\n                    edge_table[e.p2].push(e.p1);\r\n                else\r\n                    edge_table[e.p2] = [e.p1];\r\n            }\r\n\r\n            var cur_cntr = [];\r\n\r\n            for (var p in edge_table) {\r\n                if (edge_table[p].length !== 2) {\r\n                    avp.logger.warn(\"Incomplete edge table\");\r\n                    break;\r\n                }\r\n            }\r\n\r\n            //Start with the first edge, and stitch until we can no longer\r\n            while (true) {\r\n\r\n                var sfrom = undefined;\r\n\r\n                //Look for doubly connected point first\r\n                for (var p in edge_table) {\r\n                    if (edge_table[p].length > 1) {\r\n                        sfrom = p;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                //If no double-connected point found, we know\r\n                //the it will be an open contour, but stitch as much\r\n                //as we can anyway.\r\n                if (!sfrom) {\r\n                    for (var p in edge_table) {\r\n                        if (edge_table[p].length > 0) {\r\n                            sfrom = p;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!sfrom)\r\n                    break;\r\n\r\n                var prev = -1;\r\n                var cur = parseInt(sfrom);\r\n                var cur_segs = edge_table[sfrom];\r\n\r\n                //start a new contour\r\n                cur_cntr.push(cur);\r\n\r\n                while (cur_segs && cur_segs.length) {\r\n\r\n                    var toPt = cur_segs.shift();\r\n\r\n                    //skip backpointer if we hit it\r\n                    if (toPt === prev)\r\n                        toPt = cur_segs.shift();\r\n\r\n                    if (toPt === undefined) {\r\n                        delete edge_table[cur];\r\n                        break;\r\n                    }\r\n\r\n                    cur_cntr.push(toPt);\r\n\r\n                    if (cur_segs.length == 0)\r\n                        delete edge_table[cur];\r\n                    else if (cur_segs[0] === prev)\r\n                        delete edge_table[cur];\r\n\r\n                    prev = cur;\r\n                    cur = toPt;\r\n                    cur_segs = edge_table[toPt];\r\n                }\r\n\r\n                if (cur_cntr.length) {\r\n                    this.contours.push(cur_cntr);\r\n                    cur_cntr = [];\r\n                }\r\n            }\r\n\r\n            var openCntrs = [];\r\n            for (var i=0; i<this.contours.length; i++) {\r\n                var cntr = this.contours[i];\r\n                if (cntr[0] !== cntr[cntr.length-1])\r\n                    openCntrs.push(cntr);\r\n            }\r\n\r\n\r\n            if (openCntrs.length) {\r\n                //avp.logger.warn(\"Incomplete stitch\");\r\n\r\n                var didSomething = true;\r\n                while (didSomething) {\r\n\r\n                    didSomething = false;\r\n\r\n                    //Try to combine contours\r\n                    var cntr_edge_table = {};\r\n                    var contours = this.contours;\r\n\r\n                    for (var i=0; i<contours.length; i++) {\r\n                        var cntr = contours[i];\r\n                        var start = cntr[0];\r\n                        var end = cntr[cntr.length-1];\r\n\r\n                        if (start === end)\r\n                            continue;\r\n\r\n                        if (!cntr_edge_table[start])\r\n                            cntr_edge_table[start] = [-i-1];\r\n                        else\r\n                            cntr_edge_table[start].push(-i-1);\r\n\r\n\r\n                        if (!cntr_edge_table[end])\r\n                            cntr_edge_table[end] = [i];\r\n                        else\r\n                            cntr_edge_table[end].push(i);\r\n                    }\r\n\r\n                    for (var p in cntr_edge_table) {\r\n                        var entry = cntr_edge_table[p];\r\n\r\n                        if (entry.length == 2) {\r\n                            var toerase = undefined;\r\n\r\n                            if (entry[0] < 0 && entry[1] < 0) {\r\n                                var c1 = -entry[0]-1; var c2 = -entry[1]-1;\r\n                                //join start point to startpoint\r\n                                contours[c2].shift();\r\n                                Array.prototype.push.apply(contours[c1].reverse(),contours[c2]);\r\n                                toerase = c2;\r\n                            }\r\n\r\n                            if (entry[0] < 0 && entry[1] > 0) {\r\n                                var c1 = -entry[0]-1; var c2 = entry[1];\r\n                                //join start point to endpoint\r\n                                contours[c2].pop();\r\n                                Array.prototype.push.apply(contours[c2], contours[c1]);\r\n                                toerase = c1;\r\n                            }\r\n\r\n                            if (entry[0] > 0 && entry[1] < 0) {\r\n                                var c1 = entry[0]; var c2 = -entry[1]-1;\r\n                                //join end point to startpoint\r\n                                contours[c1].pop();\r\n                                Array.prototype.push.apply(contours[c1], contours[c2]);\r\n                                toerase = c2;\r\n                            }\r\n\r\n                            if (entry[0] > 0 && entry[1] > 0) {\r\n                                var c1 = entry[0]; var c2 = entry[1];\r\n                                //join end point to endpoint\r\n                                contours[c1].pop();\r\n                                Array.prototype.push.apply(contours[c1], contours[c2].reverse());\r\n                                toerase = c2;\r\n                            }\r\n\r\n                            if (toerase !== undefined) {\r\n                                contours.splice(toerase, 1);\r\n                                didSomething = true;\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n\r\n        cleanupFlatEdges() {\r\n\r\n            let pts = this.verts.pts;\r\n            let TOL = this.verts.precisionTolerance;\r\n\r\n            for (let i=0; i<this.contours.length; i++) {\r\n\r\n                let cntr = this.contours[i];\r\n\r\n                while (true) {\r\n\r\n\r\n                    let removePt = -1;\r\n\r\n                    for (let j=1; j<cntr.length-1; j++) {\r\n                        let prev = cntr[j-1];\r\n                        let cur = cntr[j];\r\n                        let next = cntr[j+1];\r\n\r\n                        let p0 = pts[prev];\r\n                        let p1 = pts[cur];\r\n                        let p2 = pts[next];\r\n\r\n                        let dx1 = p1.x - p0.x;\r\n                        let dy1 = p1.y - p0.y;\r\n                        let dx2 = p2.x - p1.x;\r\n                        let dy2 = p2.y - p1.y;\r\n\r\n                        let len1 = Math.sqrt(dx1*dx1 + dy1*dy1);\r\n                        if (len1 < TOL) {\r\n                            removePt = j;\r\n                            break;\r\n                        }\r\n\r\n                        let len2 = Math.sqrt(dx2*dx2 + dy2*dy2);\r\n                        if (len2 < TOL) {\r\n                            removePt = j;\r\n                            break;\r\n                        }\r\n\r\n                        dx1 /= len1;\r\n                        dy1 /= len1;\r\n                        dx2 /= len2;\r\n                        dy2 /= len2;\r\n\r\n                        let dot = dx1*dx2 + dy1*dy2;\r\n\r\n                        if (Math.abs(dot - 1.0) < 1e-2) {\r\n                            removePt = j;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (removePt < 0)\r\n                        break;\r\n\r\n                    cntr.splice(removePt, 1);\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n        triangulate() {\r\n\r\n            //this.cleanupFlatEdges();\r\n\r\n            //The interval tree is a faster and more tolerant\r\n            //way of checking if a point is inside the complex polygon defined\r\n            //by a set of edges. We use that in preference to the built-in\r\n            //ComplexPolygon inside checker.\r\n            let it = new IntervalTree(this.verts.pts, this.edges, this.bbox);\r\n            it.build();\r\n\r\n            let polygon = new ComplexPolygon(this.verts.pts, it, this.bbox);\r\n            polygon.contours = this.contours;\r\n            polygon.triangulate();\r\n            return polygon;\r\n\r\n        }\r\n\r\n\r\n    }\r\n","import { segmentsIntersect, pointOnLine } from \"./x-line-line\";\r\nimport { isZero, isEqual, TOL } from \"./fuzzy-math\";\r\nimport { ContourSet } from \"./contour-set\";\r\nimport { QuadTree } from \"./quad-tree\";\r\nimport { UniquePointList } from \"./point-list\";\r\n\r\nconst avp = Autodesk.Viewing.Private;\r\nconst logger = avp.logger;\r\n\r\nclass Vertex {\r\n\r\n    constructor(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n\r\n        this.edges = [];\r\n        this.dbIds = [];\r\n        this.dbIdsChanged = false;\r\n    }\r\n\r\n    isDegenerate() {\r\n        return this.edges.length < 2;\r\n    }\r\n\r\n    addEdge(de) {\r\n\r\n        //Make sure the same edge doesn't already exist\r\n        for (let i=0; i<this.edges.length; i++) {\r\n\r\n            let e = this.edges[i];\r\n\r\n            //We already have the exact same edge, return existing id\r\n            if (e.v1 === de.v1 && e.v2 === de.v2)\r\n                return e;\r\n        }\r\n\r\n        //Add the edge\r\n        this.edges.push(de);\r\n        return de;\r\n    }\r\n\r\n    removeEdge(de) {\r\n        let idx = this.edges.indexOf(de);\r\n        if (idx >= 0)\r\n            this.edges.splice(idx, 1);\r\n        else\r\n            logger.warn(\"Failed to find edge in vertex list\");\r\n    }\r\n\r\n    findEdgeTo(v) {\r\n        for (let i=0; i<this.edges.length; i++) {\r\n            let e = this.edges[i];\r\n            if (e.getOppositeVertex(this) ===  v)\r\n                return e;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    //TODO: make use of this when removing redundant vertices\r\n    disconnect() {\r\n        for (let i=0; i<this.edges.length; i++) {\r\n            let e = this.edges[i];\r\n            e.getOppositeVertex(this).removeEdge(e);\r\n        }\r\n\r\n        let res = this.edges;\r\n        this.edges = [];\r\n\r\n        //Return the edges that got orphaned and need deletion \r\n        //from the parent structure\r\n        return res;\r\n    }\r\n\r\n    sortEdges() {\r\n\r\n        this.edges.sort((a, b) => {\r\n            let angle1 = a.angle;\r\n            if (a.v1 !== this) {\r\n                angle1 -= Math.PI;\r\n            }\r\n\r\n            let angle2 = b.angle;\r\n            if (b.v1 !== this) {\r\n                angle2 -= Math.PI;\r\n            }\r\n\r\n            return angle1 - angle2;    \r\n        });\r\n\r\n    }\r\n\r\n    _canTraverse(e) {\r\n        //forward edge\r\n        if (e.v1 === this && !e.flagFwd) {\r\n            e.flagFwd = 1;\r\n            return true;\r\n        }\r\n\r\n        //reverse edge (points into this vertex)\r\n        if (e.v2 === this && !e.flagRev) {\r\n            e.flagRev = 1;\r\n            return true;    \r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    //Returns an edge that's not yet traversed during\r\n    //area finding\r\n    findUntraversedEdge() {\r\n        for (let i=0; i<this.edges.length; i++) {\r\n            let e = this.edges[i];\r\n\r\n            if (this._canTraverse(e))\r\n                return e;    \r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    //Assuming edges are already sorted,\r\n    //returns the edge that's immediately CCW to \r\n    //the given edge\r\n    findNextCCWEdge(e) {\r\n        \r\n        let idx = this.edges.indexOf(e);\r\n\r\n        if (idx === -1) {\r\n            logger.error(\"This edge isn't mine.\");\r\n            return null;\r\n        }\r\n\r\n        //Dangling vertex\r\n        if (this.isDegenerate()) {\r\n            return null;\r\n        }\r\n/*        \r\n        let idxNext = idx - 1;\r\n        if (idxNext < 0)\r\n            idxNext = this.edges.length -1;\r\n            */\r\n        let idxNext = (idx + 1) % this.edges.length;\r\n \r\n        let eNext = this.edges[idxNext];\r\n\r\n        if (this._canTraverse(eNext))\r\n            return eNext;\r\n\r\n        //logger.warn(\"Hmmm... Didn't find an edge to continue from here.\");\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\n\r\nclass DirectedEdge {\r\n\r\n    constructor(v1, v2, id) {\r\n        let swap = false;\r\n\r\n        //Orient the edge so it has increasing dy and dx\r\n        if (v2.y < v1.y)\r\n            swap = true;\r\n        else if (v2.y === v1.y)\r\n            swap = (v2.x < v1.x);\r\n\r\n        //the coordinates stored in the edge\r\n        //might be slightly different from the vertex coordinates\r\n        //of the v1 and v2 vertices. The vertices are \"snapped\" to \r\n        //the nearest snap positin, while the edge coordinates are the \"original\" ones\r\n        //from the 3d mesh that generated the edge.\r\n        if (swap) {\r\n            this.v1 = v2;\r\n            this.v2 = v1;\r\n        } else {\r\n            this.v1 = v1;\r\n            this.v2 = v2;\r\n        }\r\n\r\n        this.dx = this.v2.x - this.v1.x;\r\n        this.dy = this.v2.y - this.v1.y;\r\n        this.length2 = this.dx * this.dx + this.dy * this.dy;\r\n        this.length = Math.sqrt(this.length2);\r\n        this.angle = Math.atan2(this.dy, this.dx);\r\n\r\n        if (this.angle < 0) {\r\n            if (isZero(this.angle))\r\n                this.angle = 0;\r\n            else if (isEqual(this.angle, -Math.PI))\r\n                this.angle = Math.PI;\r\n\r\n            if (this.angle < 0)    \r\n                logger.warn(\"Unexpected edge slope <0 :\", this.angle);\r\n        }\r\n\r\n        //the edge index in the edge list of the parent data structure\r\n        this.id = id;\r\n\r\n        this.minx = Math.min(this.v1.x, this.v2.x);\r\n        this.miny = Math.min(this.v1.y, this.v2.y);\r\n        this.maxx = Math.max(this.v1.x, this.v2.x);\r\n        this.maxy = Math.max(this.v1.y, this.v2.y);\r\n\r\n\r\n        //traversal flags, set temporarily \r\n        //during graph tarversal\r\n        this.flagFwd = 0;\r\n        this.flagRev = 0;\r\n\r\n        this.dbIdsCached = null;\r\n    }\r\n\r\n    paramAlong(x, y) {\r\n        let dot = (x - this.v1.x) * this.dx + (y - this.v1.y) * this.dy;\r\n        return dot / this.length2;\r\n    }\r\n\r\n    getOppositeVertex(v) {\r\n        if (this.v1 === v)\r\n            return this.v2;\r\n        else if (this.v2 === v)\r\n            return this.v1;\r\n        else\r\n            logger.warn(\"Edge does not own this vertex.\");\r\n    }\r\n\r\n    getDbIds() {\r\n        //Return all dbIds that are common between the two \r\n        //vertices of the edge. Used when splitting edges\r\n        //to pass the information to new vertices\r\n\r\n        if (!this.v1.dbIdsChanged && !this.v2.dbIdsChanged) {\r\n            return this.dbIdsCached;\r\n        }\r\n\r\n        //Calculate intersection of the dbId arrays of\r\n        //the two vertices.\r\n        let res = [];\r\n        let idv1 = this.v1.dbIds;\r\n        let idv2 = this.v2.dbIds;\r\n        for (let i=0; i<idv1.length; i++) {\r\n            if (idv2.indexOf(idv1[i]) !== -1)\r\n                res.push(idv1[i]);\r\n        }\r\n\r\n        //Cache the result so we don't recompute unnecessarily\r\n        //This requires cooperation by the vertex object change flag.\r\n        this.dbIdsCached = res;\r\n        this.v1.dbIdsChanged = false;\r\n        this.v2.dbIdsChanged = false;\r\n\r\n        return res;\r\n    }\r\n}\r\n\r\n\r\n\r\n//doubly connected edge list\r\nexport class DCEL {\r\n\r\n\r\n    constructor(bbox, precisionTolerance) {\r\n\r\n        this.bbox = bbox;\r\n        this.boxSize = this.bbox.size().length();\r\n\r\n        if (typeof precisionTolerance === \"number\") {\r\n            //Input is in model units, e.g. if model is in feet,\r\n            //precision tolerance has to be in feet\r\n            this.precisionTolerance = precisionTolerance;\r\n        } else {\r\n            this.precisionTolerance = TOL * this.boxSize;\r\n        }\r\n\r\n        this.edges = [];\r\n        this.verts = new UniquePointList(this.bbox, this.precisionTolerance, Vertex, true);\r\n\r\n        this.quadTreeEdges = new QuadTree(this.bbox.min.x, this.bbox.min.y, this.bbox.max.x, this.bbox.max.y, this.precisionTolerance);\r\n\r\n        this.nextEdgeId = 1;\r\n    }\r\n\r\n    _addVertex(px, py, dbIds) {\r\n        return this.verts.findOrAddPoint(px, py, dbIds);\r\n    }\r\n\r\n\r\n    splitEdge(de, points) {\r\n\r\n        let pts = [];\r\n\r\n        pts.push({\r\n            x: de.v1.x,\r\n            y:de.v1.y,\r\n            u:0\r\n        });\r\n\r\n        //Remember the originating objects for this edge, to set them on the\r\n        //resulting split edges\r\n        let dbIds = de.getDbIds();\r\n\r\n        for (let i=0; i<points.length; i+=2) {\r\n\r\n            let p = {\r\n                x: points[i],\r\n                y: points[i+1],\r\n                u: de.paramAlong(points[i], points[i+1])\r\n            };\r\n\r\n            if (isZero(p.u) || isEqual(p.u, 1))\r\n                continue;\r\n\r\n            pts.push(p);\r\n        }\r\n\r\n        //The intersection points were either on the beginning or on the end\r\n        //vertex of the edge, so splitting is not needed as it will result\r\n        //in a zero length edge.\r\n        if (pts.length === 1)\r\n            return;\r\n        \r\n        pts.push({\r\n            x: de.v2.x,\r\n            y: de.v2.y,\r\n            u:1\r\n        });\r\n\r\n        pts.sort((a, b) => {\r\n            return a.u - b.u;\r\n        });\r\n\r\n        //Remove the source edge\r\n        this.removeDirectedEdge(de);\r\n\r\n        //Add all the pieces that the edge was split into\r\n        for (let i=1; i<pts.length; i++) {\r\n            this.addDirectedEdge(pts[i-1].x, pts[i-1].y, pts[i].x, pts[i].y, true, dbIds);\r\n        }\r\n    }\r\n\r\n    _enumNearEdges(de, cb) {\r\n\r\n        this.quadTreeEdges.enumNearItems(de, cb);\r\n    }\r\n\r\n    addDirectedEdge(x1, y1, x2, y2, skipSplitting, dbIds) {\r\n        let v1 = this._addVertex(x1, y1, dbIds);\r\n        let v2 = this._addVertex(x2, y2, dbIds);\r\n\r\n        if (v1 === v2) {\r\n            //logger.warn(\"zero length edge\");\r\n            return;\r\n        }\r\n\r\n        if (v1.findEdgeTo(v2)) {\r\n            //edge already exists\r\n            return;\r\n        }\r\n\r\n        let de = new DirectedEdge(v1, v2, this.nextEdgeId++);\r\n\r\n        let addedEdge = de.v1.addEdge(de);\r\n\r\n        //If the edge did not already exist...\r\n        if (addedEdge === de) {\r\n            de.v2.addEdge(de);\r\n\r\n            //Remember the unsnapped positions used for this edge\r\n            de.sourcePts = [x1, y1, x2, y2];\r\n\r\n            this.edges[de.id] = de;\r\n\r\n            this.quadTreeEdges.addItem(de);\r\n        } else {\r\n            //Edge is already in the graph, nothing to do\r\n            return addedEdge;\r\n        }\r\n\r\n        if (skipSplitting)\r\n            return addedEdge;\r\n\r\n        //Now make sure the new edge doesn't overlap or intersect existing edges\r\n        //by finding and splitting any intersecting edges\r\n        let myInts = [];\r\n        let otherInts = {};\r\n\r\n        this._enumNearEdges(de, (e) => {\r\n            let ints = segmentsIntersect(e, de, this.precisionTolerance);\r\n\r\n            if (!ints)\r\n                return;\r\n\r\n            //Existing edge was crossed by new edge -- split it\r\n            if (ints.e1 && ints.e1.length) {\r\n                otherInts[e.id] = ints.e1;\r\n            }\r\n\r\n            //New edge crossed existing edge -- remember the intersection point for later\r\n            if (ints.e2 && ints.e2.length) {\r\n                myInts.push.apply(myInts, ints.e2);\r\n            }\r\n\r\n        });\r\n\r\n        for (let id in otherInts) {\r\n            this.splitEdge(this.edges[parseInt(id)], otherInts[id]);\r\n        }\r\n\r\n        if (myInts.length)\r\n            this.splitEdge(de, myInts);\r\n\r\n        this.dirty = true;            \r\n\r\n        return addedEdge;\r\n    }\r\n\r\n    removeDirectedEdge(de) {\r\n\r\n        de.v1.removeEdge(de);\r\n        de.v2.removeEdge(de);\r\n\r\n        this.edges[de.id] = undefined;\r\n\r\n        this.quadTreeEdges.deleteItem(de);\r\n    }\r\n\r\n    removeDanglingPolyline(startVertex) {\r\n\r\n        while (startVertex.edges.length === 1) {\r\n\r\n            let de = startVertex.edges[0];\r\n            let endVertex = de.getOppositeVertex(startVertex);\r\n            this.removeDirectedEdge(de);\r\n            startVertex = endVertex;\r\n        }\r\n\r\n    }\r\n\r\n    cleanupFlatEdges() {\r\n        //get rid of vertices that only have two parallel edges going into them\r\n\r\n        let removeList = [];\r\n\r\n        this.verts.forEach(v => {\r\n\r\n            if (!v)\r\n                return;\r\n\r\n            if (v.edges.length !== 2)\r\n                return;\r\n\r\n            let e1 = v.edges[0];\r\n            let e2 = v.edges[1];\r\n\r\n            //Detect co-linear edges\r\n            let angleDelta = Math.abs(e1.angle - e2.angle);\r\n            const ANGLE_TOLERANCE = 2e-3;\r\n            if (angleDelta < ANGLE_TOLERANCE || Math.abs(angleDelta - Math.PI) < ANGLE_TOLERANCE) {\r\n                removeList.push(v);\r\n            }\r\n\r\n            //Detect degenerate triangles\r\n            let v1 = e1.getOppositeVertex(v);\r\n            let v2 = e2.getOppositeVertex(v);\r\n            let eShared = v1.findEdgeTo(v2);\r\n\r\n            if (eShared) {\r\n                let area = 0.5 * Math.abs((e1.dx * e2.dy - e2.dx * e1.dy));\r\n                if (area < 1e-3) {\r\n                    removeList.push(v);\r\n                }\r\n            }\r\n\r\n            //TODO: more generic co-linearity and degeneracy heuristics...\r\n\r\n        });\r\n\r\n\r\n        //if (removeList.length)\r\n        //    logger.log(\"Redundant edges\", removeList.length);\r\n\r\n        for (let i=0; i<removeList.length; i++) {\r\n            \r\n            let v = removeList[i];\r\n\r\n            if (v.edges.length !== 2) {\r\n                //logger.warn(\"Number of edges changed\");\r\n                continue;\r\n            }\r\n\r\n            let e1 = v.edges[0];\r\n            let e2 = v.edges[1];\r\n\r\n            let vOther1 = e1.getOppositeVertex(v);\r\n            let vOther2 = e2.getOppositeVertex(v);\r\n\r\n            this.removeDirectedEdge(e1);\r\n            this.removeDirectedEdge(e2);\r\n\r\n            this.verts.delete(v);\r\n\r\n            this.addDirectedEdge(vOther1.x, vOther1.y, vOther2.x, vOther2.y, true);\r\n        }\r\n\r\n        //Clean up again, until no more redundant vertices exist\r\n        if (removeList.length)\r\n            return this.cleanupFlatEdges();\r\n    }\r\n\r\n\r\n\r\n    _compactLists() {\r\n\r\n        this.verts.compact();\r\n\r\n\r\n        let edges = [];\r\n\r\n        for (let i=0, len=this.edges.length; i<len; i++) {\r\n            let e = this.edges[i];\r\n            if (!e)\r\n                continue;\r\n\r\n            e.oldid = e.id;\r\n            e.flagFwd = 0;\r\n            e.flagRev = 0;\r\n            e.id = edges.length;\r\n            edges.push(e);\r\n        }\r\n\r\n        this.edges = edges;\r\n    }\r\n\r\n\r\n    //converts closed areas to polygons with holes, in a way where\r\n    //holes themseves are also marked as separate polygons in their own\r\n    //right, thus filling the whole area (i.e. non-zero fill method).\r\n    _detectHolesNonZero(customInsideChecker) {\r\n\r\n        this.holes = [];\r\n\r\n        //Skip the very largest polygon, because that is\r\n        //the overall model perimeter\r\n        //TODO: This logic is Location Breakdown specific\r\n        this.outerPerimeter = this.closedAreas[this.closedAreas.length-1];\r\n        if (this.outerPerimeter)\r\n            this.outerPerimeter.triangulate();\r\n\r\n        for (let i=0, len=this.closedAreas.length-1; i<len; i++) {\r\n\r\n            let cs = this.closedAreas[i];\r\n\r\n            //detect if the polygon is actually a hole in a\r\n            //bigger exterior polygon\r\n            //The logic we use here: if a polygon contains\r\n            //any of the smaller polygons inside it, it is a hole of a bigger polygon\r\n            //If a polygon contains a polygon marked as a hole, then add the hole to it\r\n            //before triangulating.\r\n            //TODO: this can be optimized via spatial index if number of polygons becomes large\r\n            for (let j=i-1; j>=0; j--) {\r\n                let cs2 = this.closedAreas[j];\r\n\r\n                //Only need to check a single point from the interior of the\r\n                //potential hole. Make sure it's inside the triangulation and not on the edge\r\n                //to avoid numeric noise.\r\n                if (cs.containsPointFrom(cs2)) {\r\n                    if (cs2.isHole) {\r\n                        cs.addContourSet(cs2);\r\n                    } else {\r\n                        cs.isHole = true;\r\n                        this.holes.push(cs);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            //We added all the holes, now triangulate again with the holes in mind\r\n            if (!cs.isHole) {\r\n                cs.triangulate(customInsideChecker);\r\n            }\r\n\r\n        }\r\n\r\n\r\n        //Do a second pass over just the holes\r\n        //and convert each hole that contains a hole\r\n        //to a real polygon area.\r\n        //TODO: I don't really know if this is mathematically correct...\r\n        for (let i=0, len=this.holes.length; i<len; i++) {\r\n\r\n            let cs = this.holes[i];\r\n\r\n            cs.triangulate(customInsideChecker);\r\n\r\n            //If a hole contains a hole inside it, then it is\r\n            //no longer hole, mark both as processed\r\n            for (let j=i-1; j>=0; j--) {\r\n\r\n                let cs2 = this.holes[j];\r\n\r\n                if (cs2.holeProcessFlag)\r\n                    continue;\r\n\r\n                //Only need to check a single point from the interior of the\r\n                //potential hole. Make sure it's inside the triangulation and not on the edge\r\n                //to avoid numeric noise.\r\n                if (cs.containsPointFrom(cs2)) {\r\n                    cs.addContourSet(cs2);\r\n                    cs.isHole = false;\r\n                    cs2.holeProcessFlag = true;\r\n                }\r\n            }\r\n\r\n            //We added all the holes, now triangulate again with the holes in mind\r\n            if (!cs.isHole) {\r\n                cs.triangulate(customInsideChecker);\r\n            }\r\n\r\n        }\r\n\r\n        //Remove all holes from the list of polygons\r\n        let filteredNonHoles = [];\r\n        for (let i=0; i<this.closedAreas.length-1; i++) {\r\n            let cs = this.closedAreas[i];\r\n            if (cs.isHole)\r\n                continue;\r\n\r\n            cs.id = filteredNonHoles.length;\r\n            filteredNonHoles.push(cs);\r\n        }\r\n\r\n        this.closedAreas = filteredNonHoles;\r\n\r\n\r\n    }\r\n\r\n    _detectHolesEvenOdd(customInsideChecker) {\r\n\r\n        let allAreas = this.closedAreas;\r\n        if (this.openAreas && this.openAreas.length)\r\n            allAreas = allAreas.concat(this.openAreas);\r\n\r\n        if (!allAreas.length) {\r\n            this.closedAreas = [];\r\n            this.openAreas = null;\r\n            return;\r\n        }\r\n\r\n        //In the DCEL, each polygon outline or hole contour\r\n        //appears twice (due to the structure being doubly connected), so\r\n        //here we drop the twin polygon.\r\n        let cmap = {};\r\n        let removed = 0;\r\n        for (let i=0; i<allAreas.length; i++) {\r\n            let a = allAreas[i];\r\n            let hash = a.hash();\r\n            if (cmap[hash])\r\n                removed++;\r\n            else\r\n                cmap[hash] = a;\r\n        }\r\n\r\n        //if (removed * 2 !== allAreas.length)\r\n        //    logger.log(\"Unexpected duplicate count: removed\", removed, \"from\", allAreas.length);\r\n\r\n        allAreas = Object.values(cmap);\r\n\r\n        //Make one giant complex polygon out of all the contours, and let\r\n        //it triangulate itself using its default even-odd fill rule\r\n        let csAll = new ContourSet();\r\n\r\n        for (let i=0; i<allAreas.length; i++) {\r\n            csAll.addContourSet(allAreas[i]);\r\n        }\r\n\r\n        csAll.triangulate(customInsideChecker || this.quadTreeEdges);\r\n\r\n        if (csAll.triangulationFailed) {\r\n            //OK, now we get desperate -- the above triangulation attempt\r\n            //of the whole thing as one failed, so we triangulate each\r\n            //area separately (together with areas that are roughly inside it),\r\n            //and filter that result based on even-odd inside checker.\r\n            this._detectHolesNonZero(customInsideChecker || this.quadTreeEdges);\r\n        } else {\r\n            this.closedAreas = [csAll];\r\n            this.openAreas = [];\r\n        }\r\n    }\r\n\r\n\r\n    finalize(useEvenOddFill, customInsideChecker) {\r\n\r\n        //Remove useless vertices\r\n        this.cleanupFlatEdges();\r\n\r\n        this._compactLists();\r\n\r\n        //Sort the edges of each vertex according to direction\r\n        this.verts.forEach(v => v.sortEdges());\r\n\r\n        //traverse the graph and build closed polygons \r\n        //by following the edges in a counterclockwise direction\r\n        \r\n        let polygons = [];\r\n        let openPolygons = [];\r\n\r\n        this.verts.forEach(v => {\r\n            let e = v.findUntraversedEdge();\r\n\r\n            if (!e)\r\n                return;\r\n\r\n            let polygon = [v];\r\n\r\n            let vNext = e.getOppositeVertex(v);\r\n            do {\r\n                polygon.push(vNext);\r\n                e = vNext.findNextCCWEdge(e);\r\n                if (!e)\r\n                    break;\r\n                vNext = e.getOppositeVertex(vNext);\r\n            } while (vNext && vNext !== v);\r\n\r\n            if (vNext === v) {\r\n                polygon.push(v);\r\n                polygons.push(polygon);\r\n            } else {\r\n                openPolygons.push(polygon);\r\n            }\r\n        });\r\n\r\n        //logger.log(\"closed polygons:\", polygons.length);\r\n        //if (openPolygons.length)\r\n          //  logger.log(\"open polygons:\", openPolygons.length);\r\n\r\n        this.closedAreas = [];\r\n        for (let i=0, len=polygons.length; i<len; i++) {\r\n            let cs = new ContourSet();\r\n            cs.addContour(polygons[i]);\r\n            this.closedAreas.push(cs);\r\n        }\r\n\r\n        //Sort by increasing area, so that\r\n        //we discover potential polygon holes before we\r\n        //triangulate their bigger exterior outlines\r\n        this.closedAreas.sort((a, b) => {\r\n            return a.area() - b.area();\r\n        });\r\n\r\n\r\n        if (useEvenOddFill) {\r\n            this._detectHolesEvenOdd(customInsideChecker);\r\n        } else {\r\n            this._detectHolesNonZero(customInsideChecker);\r\n        }\r\n\r\n\r\n        //Put all open polygons into a single set of contours\r\n        //and combine as many as possible end to end to get\r\n        //a minimal number of open contours.\r\n        this.openAreas = [];\r\n        if (openPolygons.length) {\r\n            let openAreas = [];\r\n            let cs = new ContourSet();\r\n            for (let i=0, len=openPolygons.length; i<len; i++) {\r\n                cs.addContour(openPolygons[i]);\r\n            }\r\n            cs.stitchContours();\r\n            cs.triangulate();\r\n            openAreas.push(cs); \r\n            //logger.log(\"Stitched open polygons\", cs.contours.length);\r\n\r\n            this.openAreas = openAreas;\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    deleteEdgesOnLine(x1, y1, x2, y2) {\r\n\r\n        let v1Tmp = new Vertex(x1, y1);\r\n        let v2Tmp = new Vertex(x2, y2);\r\n        let deTmp = new DirectedEdge(v1Tmp, v2Tmp, -1);\r\n\r\n        //Find edges crossed by the given segment\r\n        let otherInts = {};\r\n\r\n        this._enumNearEdges(deTmp, e => {\r\n\r\n            let ints = segmentsIntersect(e, deTmp, this.precisionTolerance);\r\n\r\n            if (!ints)\r\n                return;\r\n\r\n            //Existing edge was crossed by new edge\r\n            if (ints.e1 && ints.e1.length) {\r\n                otherInts[e.id] = ints.e1;\r\n            }\r\n        });\r\n\r\n        //Remove the intersected edges, effectively\r\n        //joining all areas defined by those edges.\r\n        //This is brute force, in theory we can find all\r\n        //contour sets that own the intersected edges\r\n        //and update the triangulations, but it doesn't seem worth it\r\n        for (let sid in otherInts) {\r\n            let eid = parseInt(sid);\r\n            let edge = this.edges[eid];\r\n            this.removeDirectedEdge(edge);\r\n\r\n            //clean up any \"dangling\" vertices left by the edge removal.\r\n            //those are edges that are only connected to the deleted edge and nothing else\r\n            this.removeDanglingPolyline(edge.v1);\r\n            this.removeDanglingPolyline(edge.v2);\r\n        }\r\n\r\n        this.dirty = true;\r\n    }\r\n\r\n    //Given a rectangle, join all areas that intersect the rectangle\r\n    deleteEdgesInRectangle(x1, y1, x2, y2) {\r\n\r\n        let minx = Math.min(x1, x2);\r\n        let miny = Math.min(y1, y2);\r\n        let maxx = Math.max(x1, x2);\r\n        let maxy = Math.max(y1, y2);\r\n\r\n        let otherInts = {};\r\n\r\n        //find edges completely inside the rectangle\r\n        this.quadTreeEdges.enumInBox(minx, miny, maxx, maxy, e => {\r\n            otherInts[e.id] = e;\r\n        });\r\n\r\n        //Remove the intersected edges, effectively\r\n        //joining all areas defined by those edges.\r\n        //This is brute force, in theory we can find all\r\n        //contour sets that own the intersected edges\r\n        //and update the triangulations, but it doesn't seem worth it\r\n        for (let sid in otherInts) {\r\n            let eid = parseInt(sid);\r\n            let edge = this.edges[eid];\r\n\r\n            if (!edge)\r\n                continue;\r\n\r\n            this.removeDirectedEdge(edge);\r\n\r\n            //clean up any \"dangling\" vertices left by the edge removal.\r\n            //those are edges that are only connected to the deleted edge and nothing else\r\n            this.removeDanglingPolyline(edge.v1);\r\n            this.removeDanglingPolyline(edge.v2);\r\n        }\r\n\r\n\r\n        this.dirty = true;\r\n    }\r\n\r\n    findNearestVertex(x, y, radius) {\r\n        \r\n        if (typeof radius !== \"number\")\r\n            radius = this.precisionTolerance;\r\n\r\n        let dNear = Infinity;\r\n        let vNear = null;\r\n\r\n        this.verts.enumInBox(x-radius, y-radius, x+radius, y+radius, v => {\r\n\r\n            let d = (v.x - x) * (v.x - x) + (v.y - y) * (v.y - y);\r\n            if (d < dNear) {\r\n                dNear = d;\r\n                vNear = v;\r\n            }\r\n\r\n        });\r\n\r\n        return (dNear <= radius * radius) ? vNear : null;\r\n    }\r\n\r\n    findNearestPointOnEdge(x, y, radius) {\r\n\r\n        if (typeof radius !== \"number\")\r\n            radius = this.precisionTolerance;\r\n\r\n        let tmp = { x:0, y:0, u:0, d:-1 };\r\n        let ptNearest = { x:0, y:0, d: Infinity, e:null };\r\n\r\n        this.quadTreeEdges.enumInBox(x-radius, y-radius, x+radius, y+radius, e => {\r\n\r\n            let result = pointOnLine(x, y, e, true, radius, tmp);\r\n\r\n            if (result) {\r\n                if (tmp.d < ptNearest.d) {\r\n                    ptNearest.x = tmp.x;\r\n                    ptNearest.y = tmp.y;\r\n                    ptNearest.d = tmp.d;\r\n                    ptNearest.e = e;\r\n                }\r\n            }\r\n        });\r\n\r\n        return (ptNearest.d <= radius) ? ptNearest : null;\r\n            \r\n    }\r\n\r\n}","\r\nvar point = new THREE.Vector3();\r\n\r\nexport function xBoxPlane(plane, box) {\r\n\r\n    point.set( box.min.x, box.min.y, box.min.z ); // 000\r\n    var d = plane.distanceToPoint(point);\r\n    var s = Math.sign(d);\r\n\r\n    point.set( box.min.x, box.min.y, box.max.z ); // 001\r\n    var d2 = plane.distanceToPoint(point);\r\n    if (Math.sign(d2) !== s)\r\n        return true;\r\n\r\n    point.set( box.min.x, box.max.y, box.min.z ); // 010\r\n    d2 = plane.distanceToPoint(point);\r\n    if (Math.sign(d2) !== s)\r\n        return true;\r\n\r\n    point.set( box.min.x, box.max.y, box.max.z ); // 011\r\n    d2 = plane.distanceToPoint(point);\r\n    if (Math.sign(d2) !== s)\r\n        return true;\r\n\r\n    point.set( box.max.x, box.min.y, box.min.z ); // 100\r\n    d2 = plane.distanceToPoint(point);\r\n    if (Math.sign(d2) !== s)\r\n        return true;\r\n\r\n    point.set( box.max.x, box.min.y, box.max.z ); // 101\r\n    d2 = plane.distanceToPoint(point);\r\n    if (Math.sign(d2) !== s)\r\n        return true;\r\n\r\n    point.set( box.max.x, box.max.y, box.min.z ); // 110\r\n    d2 = plane.distanceToPoint(point);\r\n    if (Math.sign(d2) !== s)\r\n        return true;\r\n\r\n    point.set( box.max.x, box.max.y, box.max.z ); // 111\r\n    d2 = plane.distanceToPoint(point);\r\n    if (Math.sign(d2) !== s)\r\n        return true;\r\n\r\n    return false;\r\n}\r\n","\r\n\"use strict\";\r\n\r\n//const THREE = THREE;\r\nconst avp = Autodesk.Viewing.Private;\r\nconst VertexEnumerator = avp.VertexEnumerator;\r\n\r\nimport { isZero } from \"./fuzzy-math\";\r\nimport { xTrianglePlane } from \"./x-triangle-plane\";\r\n\r\n\r\nvar mi = new THREE.Matrix4();\r\nvar pi = new THREE.Plane();\r\n\r\nexport function xMeshPlane( plane, mesh, intersects ) {\r\n\r\n    let geometry = mesh.geometry;\r\n\r\n    if (!geometry)\r\n        return;\r\n\r\n    let baseIndex = intersects.length;\r\n\r\n    let matrixWorld = mesh.matrixWorld;\r\n    mi.getInverse(matrixWorld);\r\n    pi.copy(plane).applyMatrix4(mi);\r\n\r\n    VertexEnumerator.enumMeshTriangles(geometry, function(vA, vB, vC, a, b, c) {\r\n\r\n        xTrianglePlane(pi, vA, vB, vC, a, b, c, intersects, mesh.fragId);\r\n\r\n    });\r\n\r\n    //Put the points into world space. It should actually be possible to do\r\n    //the entire math in object space -- but we have to check if all fragments\r\n    //that belong to the same dbId have the same world transform.\r\n    for (let i=baseIndex, iEnd=intersects.length; i<iEnd; i++) {\r\n        intersects[i].v1.applyMatrix4(matrixWorld);\r\n        intersects[i].v2.applyMatrix4(matrixWorld);\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction makeRotationAxis( axis, cosa, m ) {\r\n\r\n    // Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n    let c = cosa;\r\n    let s = Math.sqrt(1.0 - c*c);\r\n    let t = 1 - c;\r\n    let x = axis.x, y = axis.y, z = axis.z;\r\n    let tx = t * x, ty = t * y;\r\n\r\n    m.set(\r\n\r\n        tx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n        tx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n        tx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n        0, 0, 0, 1\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\nexport function makePlaneBasis(plane) {\r\n\r\n    //var origin = plane.coplanarPoint();\r\n\r\n    let sceneUp = new THREE.Vector3(0,0,1);\r\n    let cross = plane.normal.clone().cross(sceneUp);\r\n    cross = cross.normalize();\r\n    let dot = sceneUp.dot(plane.normal);\r\n\r\n    //We are ignoring the translation here, since\r\n    //we will drop the Z coord for the 2D processing steps anyway.\r\n    let planeBasis = new THREE.Matrix4();\r\n\r\n    if (!(isZero(cross.x) && isZero(cross.y) && isZero(cross.z))) {\r\n        makeRotationAxis(cross, dot, planeBasis);\r\n        planeBasis.elements[14] = plane.constant;\r\n    } else {\r\n        planeBasis.elements[14] = dot * plane.constant;\r\n    }\r\n\r\n    return planeBasis;\r\n}\r\n\r\n\r\nexport function convertToPlaneCoords(planeBasis, edges3d, bbox) {\r\n\r\n    for (let i=0; i<edges3d.length; i++) {\r\n        let e = edges3d[i];\r\n\r\n        e.v1.applyMatrix4(planeBasis);\r\n        e.v2.applyMatrix4(planeBasis);\r\n\r\n        bbox.expandByPoint(e.v1);\r\n        bbox.expandByPoint(e.v2);\r\n    }\r\n}\r\n\r\n","\nimport {TOL} from \"./fuzzy-math\";\nimport { QuadTree } from \"./quad-tree\";\nimport { Point } from \"./poly2tri\";\n\nexport class UniquePointList {\n\n    constructor(bbox, precisionTolerance, VertexConstructor, useQuadTree) {\n\n        this.bbox = bbox;\n        this.boxSize = this.bbox.size().length();\n\n        if (typeof precisionTolerance === \"number\") {\n            //Input is in model units, e.g. if model is in feet,\n            //precision tolerance has to be in feet\n            this.precisionTolerance = precisionTolerance;\n            this.scale = 1.0 / this.precisionTolerance;\n        } else {\n            this.precisionTolerance = TOL * this.boxSize;\n            this.scale = 1.0 / this.precisionTolerance;\n        }\n\n        this.precisionToleranceSq = this.precisionTolerance * this.precisionTolerance;\n\n        this.snapBaseX = (this.bbox.min.x); ///- 0.5 * this.precisionTolerance;\n        this.snapBaseY = (this.bbox.min.y); //- 0.5 * this.precisionTolerance;\n\n\n        this.pts = [];\n        this.xymap = new Map();\n\n        if (useQuadTree)\n            this.quadTreeVerts = new QuadTree(bbox.min.x, bbox.min.y, bbox.max.x, bbox.max.y, precisionTolerance);\n\n        this.vertexConstructor = VertexConstructor;\n    }\n\n    findOrAddPoint(px, py, dbIds) {\n\n        //Snap the vertex to our desired granularity\n        let x = 0 | /*Math.round*/((px - this.snapBaseX) * this.scale);\n        let y = 0 | /*Math.round*/((py - this.snapBaseY) * this.scale);\n\n        //Find the nearest snapped vertex or create new\n        let v;\n        let minDist = Infinity;\n        //Look in the 9 square area surrounding the vertex\n        for (let i=x-1; i<=x+1; i++) {\n            let mx = this.xymap.get(i);\n            if (!mx)\n                continue;\n\n            for (let j=y-1; j<=y+1; j++) {\n                let tmp = mx.get(j);\n                if (!tmp)\n                    continue;\n\n                let dist = (tmp.x - px) * (tmp.x - px) + (tmp.y - py) * (tmp.y - py);\n\n                if (dist < minDist) {\n                    v = tmp;\n                    minDist = dist;\n                }\n            }\n        }\n\n        if (minDist > this.precisionToleranceSq)\n            v = undefined;\n\n        if (v === undefined) {\n            let mx = this.xymap.get(x);\n\n            if (!mx) {\n                mx = new Map();\n                this.xymap.set(x, mx);\n            }\n\n            v = this.vertexConstructor ? new this.vertexConstructor(px, py) : new Point(px, py);\n            mx.set(y, v);\n            v.id = this.pts.length;\n            this.pts.push(v);\n\n            if (this.quadTreeVerts)\n                this.quadTreeVerts.addItem(v);\n        }\n\n        //Remember the source object that's adding this vertex\n        if (typeof dbIds !== \"undefined\") {\n            if (typeof dbIds === \"number\") {\n                if (v.dbIds.indexOf(dbIds) === -1)\n                    v.dbIds.push(dbIds);\n            } else if (dbIds) {\n                for (let i=0; i<dbIds.length; i++) {\n                    let dbId = dbIds[i];\n                    if (v.dbIds.indexOf(dbId) === -1)\n                        v.dbIds.push(dbId);\n                }\n            }\n            v.dbIdsChanged = true;\n        }\n\n        return v;\n    }\n\n\n    forEach(f) {\n        this.pts.forEach(f);\n    }\n\n    delete(v) {\n        this.pts[v.id] = undefined;\n\n        if (this.quadTreeVerts)\n            this.quadTreeVerts.deleteItem(v);\n    }\n\n    //filters out null entries from the point list\n    compact() {\n\n        let pts = [];\n\n        for (let i=0, len=this.pts.length; i<len; i++) {\n            let v = this.pts[i];\n            if (!v)\n                continue;\n\n            v.oldid = v.id;\n            v.id = pts.length;\n            pts.push(v);\n        }\n\n        this.pts = pts;\n\n    }\n\n    enumInBox(minx, miny, maxx, maxy, f) {\n        this.quadTreeVerts.enumInBox(minx, miny, maxx, maxy, f);\n    }\n\n}","import { xLineBox } from \"./x-line-box\";\r\nimport { xBoxBox } from \"./x-box-box\";\r\n\r\n//Spatial index data structure for fast lookup of line segments or points.\r\n//\r\n// It can also be used for other kinds of items. For this, you can specify an itemHandler, which tells the quadtree \r\n// how to work with the items. It must provide two functions:\r\n//\r\n// itemHandler = {\r\n//    // Check wheter the (bbox of) this item intersects with the given one\r\n//    insersectsBox: function(item, xmin, ymin, xmax, ymax) {...},\r\n// \r\n//    // Set 'outPoint' to a point on or close to the item, e.g. bbox center. outPoint is a {x, y} pair.\r\n//    getPoint: function(item, outPoint) {...}\r\n//  }\r\n\r\n\r\n\r\nconst ITEMS_PER_NODE = 16;\r\nconst EPS = 1e-20;\r\nconst avp = Autodesk.Viewing.Private;\r\nconst logger = avp.logger;\r\n\r\nconst tmpPoint = {x:0, y:0};\r\n\r\nexport class QuadTree {\r\n\r\n    constructor(minx, miny, maxx, maxy, extraDistance, itemHandler) {\r\n\r\n        this.items = [];\r\n        this.children = null;\r\n        this.itemCount = 0;\r\n\r\n        this.extraDistance = extraDistance;\r\n\r\n        this.minx = minx;\r\n        this.miny = miny;\r\n        this.maxx = maxx;\r\n        this.maxy = maxy;\r\n\r\n        this.itemHandler = itemHandler;\r\n    }\r\n\r\n\r\n    addItem(e) {\r\n\r\n        //TODO: must check if item fits inside our total bbox\r\n        //before adding. In such case we may have to expand the\r\n        //tree somehow\r\n\r\n        this.itemCount++;\r\n\r\n        if (this.children) {\r\n            let overlapCount = 0;\r\n            let whichChild = null;\r\n\r\n            for (let i=0; i<4; i++) {\r\n                if (this.children[i].intersectsItem(e)) {\r\n                    whichChild = this.children[i];\r\n                    overlapCount++;\r\n                }\r\n            }\r\n\r\n            if (overlapCount === 0) {\r\n\r\n            } else if (overlapCount === 1) {\r\n                whichChild.addItem(e);\r\n            } else {\r\n                this.items.push(e);\r\n            }\r\n\r\n        } else {\r\n            this.items.push(e);\r\n\r\n            if (this.items.length > ITEMS_PER_NODE)\r\n                this.subdivide();\r\n        }\r\n\r\n        return this.itemCount;\r\n    }\r\n\r\n    deleteItem(e) {\r\n\r\n        if (!this.intersectsItem(e))\r\n            return 0;\r\n\r\n        if (this.items) {\r\n            let idx = this.items.indexOf(e);\r\n            if (idx >=0) {\r\n                this.items.splice(idx, 1);\r\n                this.itemCount--;\r\n                return 1;\r\n            }\r\n        }\r\n\r\n        if (this.children) {\r\n            let deleteCount = 0;\r\n            let remainingItemsCount = 0;\r\n            for (let i=0; i<4; i++) {\r\n                deleteCount += this.children[i].deleteItem(e);\r\n                remainingItemsCount += this.children[i].itemCount;\r\n            }\r\n\r\n            if (remainingItemsCount < ITEMS_PER_NODE) {\r\n                //TODO: un-split the node here\r\n            }\r\n\r\n            if (deleteCount === 1) {\r\n                this.itemCount--;\r\n                return 1;\r\n            } else {\r\n                logger.warn(\"Did not find item to delete. Something is wrong.\", deleteCount);\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    intersectsBox(minx, miny, maxx, maxy) {\r\n\r\n        let d = this.extraDistance;\r\n\r\n        return xBoxBox(minx, miny, maxx, maxy,\r\n            this.minx - d, this.miny - d, this.maxx + d, this.maxy + d);\r\n    }\r\n\r\n    intersectsItem(e) {\r\n\r\n        if (this.itemHandler) {\r\n            return this.itemHandler.intersectsBox(e, \r\n                this.minx - this.extraDistance, this.miny - this.extraDistance,\r\n                this.maxx + this.extraDistance, this.maxy + this.extraDistance\r\n            );\r\n        } else if (e.v1) {\r\n            //Edge\r\n            return xLineBox(e.v1.x, e.v1.y, e.v2.x, e.v2.y,\r\n                            this.minx - this.extraDistance, this.miny - this.extraDistance,\r\n                            this.maxx + this.extraDistance, this.maxy + this.extraDistance);\r\n        } else {\r\n            //Vertex\r\n            return this.intersectsBox(e.x, e.y, e.x, e.y);\r\n        }\r\n    }\r\n\r\n    findSplitPoint() {\r\n        //determine split location -- we split along the\r\n        //midpoint of actual data inside the node\r\n        let xs = [];\r\n        let ys = [];\r\n\r\n        if (this.itemHandler) {\r\n            for (let i=0; i<this.items.length; i++) {\r\n                this.itemHandler.getPoint(this.items[i], tmpPoint);\r\n                xs.push(tmpPoint.x);\r\n                ys.push(tmpPoint.y);\r\n            }\r\n        } else if (this.items[0].v1) {\r\n            for (let i=0; i<this.items.length; i++) {\r\n                xs.push(this.items[i].v1.x);\r\n                ys.push(this.items[i].v1.y);\r\n            }\r\n        } else {\r\n            for (let i=0; i<this.items.length; i++) {\r\n                xs.push(this.items[i].x);\r\n                ys.push(this.items[i].y);\r\n            }\r\n        }\r\n\r\n        xs.sort((a,b) => { return a-b});\r\n        ys.sort((a,b) => { return a-b});\r\n\r\n        //Split slightly to the left of the median min point for all edge items\r\n        let midx = xs[0 | ((xs.length+1) / 2)] - this.extraDistance - EPS;\r\n        let midy = ys[0 | ((ys.length+1) / 2)] - this.extraDistance - EPS;\r\n\r\n        if (midx <= this.minx || midx >= this.maxx || midy <= this.miny || midy >= this.maxy) {\r\n            //logger.warn(\"Failed to split quad tree node. Something is wrong with the split choice.\");\r\n            return null;\r\n        }\r\n\r\n        return { midx, midy };\r\n    }\r\n\r\n\r\n    subdivide() {\r\n\r\n        if (this.children) {\r\n            logger.error(\"Attempt to subdivide already split node\");\r\n            return;\r\n        }\r\n\r\n        if (!this.items.length) {\r\n            logger.error(\"Attempt to subdivide empty node\");\r\n            return;\r\n        }\r\n\r\n        let minx = this.minx;\r\n        let miny = this.miny;\r\n        let maxx = this.maxx;\r\n        let maxy = this.maxy;\r\n\r\n        //determine split location -- we split along the\r\n        //midpoint of actual data inside the node\r\n        let split = this.findSplitPoint();\r\n\r\n        if (!split) {\r\n            //logger.warn(\"Failed to split node\");\r\n            return;\r\n        }\r\n\r\n        let { midx, midy } = split;\r\n\r\n        this.children = new Array(4);\r\n        this.children[0] = new QuadTree(minx, miny, midx, midy, this.extraDistance, this.itemHandler);\r\n        this.children[1] = new QuadTree(midx, miny, maxx, midy, this.extraDistance, this.itemHandler);\r\n        this.children[2] = new QuadTree(midx, midy, maxx, maxy, this.extraDistance, this.itemHandler);\r\n        this.children[3] = new QuadTree(minx, midy, midx, maxy, this.extraDistance, this.itemHandler);\r\n\r\n        let keepItems = [];\r\n\r\n        for (let i=0, iEnd = this.items.length; i<iEnd; i++) {\r\n\r\n            let overlapCount = 0;\r\n            let whichChild = null;\r\n\r\n            for (let j=0; j<4; j++) {\r\n                if (this.children[j].intersectsItem(this.items[i])) {\r\n                    whichChild = this.children[j];\r\n                    overlapCount++;\r\n                }\r\n            }\r\n\r\n            if (overlapCount === 0) {\r\n                logger.error(\"Expected at least one overlap\");\r\n            } else if (overlapCount === 1) {\r\n                whichChild.addItem(this.items[i]);\r\n            } else {\r\n                keepItems.push(this.items[i]);\r\n            }\r\n        }\r\n\r\n        this.items = keepItems;\r\n    }\r\n\r\n    enumNearItems(e, cb) {\r\n\r\n        if (!this.intersectsItem(e))\r\n            return;\r\n\r\n        if (this.items) {\r\n            for (let i=0; i<this.items.length; i++) {\r\n                cb(this.items[i]);\r\n            }\r\n        }\r\n\r\n        if (this.children) {\r\n            for (let i=0; i<4; i++) {\r\n                this.children[i].enumNearItems(e, cb);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    enumInBox(minx, miny, maxx, maxy, cb) {\r\n\r\n        if (!this.intersectsBox(minx, miny, maxx, maxy))\r\n            return;\r\n\r\n        if (this.items) {\r\n            for (let i=0; i<this.items.length; i++) {\r\n                let e = this.items[i];\r\n\r\n                if (this.itemHandler) {\r\n                    if (this.itemHandler.intersectsBox(e, minx, miny, maxx, maxy)) {\r\n                        cb(e);\r\n                    }\r\n                } else if (e.v1) {\r\n                    if (xLineBox(e.v1.x, e.v1.y, e.v2.x, e.v2.y, minx, miny, maxx, maxy))\r\n                        cb(e);\r\n                } else {\r\n                    if (xBoxBox(e.x, e.y, e.x, e.y, minx, miny, maxx, maxy))\r\n                        cb(e);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.children) {\r\n            for (let i=0; i<4; i++) {\r\n                this.children[i].enumInBox(minx, miny, maxx, maxy, cb);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    pointInPolygonRec(e, x, y) {\r\n\r\n        // get the last point in the polygon\r\n        var vtx0X = e.v1.x;\r\n        var vtx0Y = e.v1.y;\r\n\r\n        // get test bit for above/below X axis\r\n        var yflag0 = (vtx0Y >= y);\r\n\r\n        var vtx1X = e.v2.x;\r\n        var vtx1Y = e.v2.y;\r\n\r\n        var yflag1 = (vtx1Y >= y);\r\n\r\n        // Check if endpoints straddle (are on opposite sides) of X axis\r\n        // (i.e. the Y's differ); if so, +X ray could intersect this edge.\r\n        // The old test also checked whether the endpoints are both to the\r\n        // right or to the left of the test point.  However, given the faster\r\n        // intersection point computation used below, this test was found to\r\n        // be a break-even proposition for most polygons and a loser for\r\n        // triangles (where 50% or more of the edges which survive this test\r\n        // will cross quadrants and so have to have the X intersection computed\r\n        // anyway).  I credit Joseph Samosky with inspiring me to try dropping\r\n        // the \"both left or both right\" part of my code.\r\n        if (yflag0 != yflag1)\r\n        {\r\n            // Check intersection of pgon segment with +X ray.\r\n            // Note if >= point's X; if so, the ray hits it.\r\n            // The division operation is avoided for the \">=\" test by checking\r\n            // the sign of the first vertex wrto the test point; idea inspired\r\n            // by Joseph Samosky's and Mark Haigh-Hutchinson's different\r\n            // polygon inclusion tests.\r\n            if (((vtx1Y-y)*(vtx0X-vtx1X) >=\r\n                    (vtx1X-x)*(vtx0Y-vtx1Y)) == yflag1)\r\n            {\r\n                this.pipResult = !this.pipResult;\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    pointInPolygon(x, y) {\r\n\r\n        this.pipResult = false;\r\n\r\n        this.enumInBox(-Infinity, y, Infinity, y, item => {\r\n\r\n            this.pointInPolygonRec(item, x, y);\r\n\r\n        });\r\n\r\n        return this.pipResult;\r\n\r\n    };\r\n\r\n\r\n}\r\n\r\n","\r\nimport { ComplexPolygon } from \"./complex-polygon\";\r\n\r\nexport function polygonArea(pts) {\r\n    \r\n    if (pts.length < 3)\r\n        return 0;\r\n\r\n    let needsClose = false;\r\n    if (pts[0] !== pts[pts.length-1])\r\n        needsClose = true;\r\n\r\n    let total = 0;\r\n    for (let i=0, len=pts.length-1; i<len; i++) {\r\n        let v1 = pts[i];\r\n        let v2 = pts[i+1];\r\n        total += v1.x * v2.y - v2.x * v1.y;\r\n    }\r\n\r\n    if (needsClose) {\r\n        let v1 = pts[pts.length-1];\r\n        let v2 = pts[0];\r\n        total += v1.x * v2.y - v2.x * v1.y;\r\n    }\r\n\r\n    return total * 0.5;\r\n}\r\n\r\n\r\nlet v2 = new THREE.Vector2();\r\n\r\n\r\n//An intermediate complex polygon representation, used by the DCEL structure to compose and triangulate\r\n//complex polygons, and also to convert the polygon data to various visualization representations\r\nexport class ContourSet {\r\n\r\n    constructor() {\r\n        this.contours = [];\r\n        this.areas = [];\r\n        this.bbox = new THREE.Box2();\r\n\r\n        this.allPoints = this.pts = [];\r\n        this.allPointsMap = {};\r\n    }\r\n\r\n    addContour(verts, skipZeroAreas) {\r\n\r\n        this.polygon = null;\r\n        this.perimeterMem = undefined;\r\n\r\n        let area = polygonArea(verts);\r\n\r\n        if (area < 0) {\r\n            verts.reverse();\r\n            area = Math.abs(area);\r\n        }\r\n\r\n        let cntr = [];\r\n\r\n        verts.forEach( (v, i) => {\r\n\r\n            let id = v.id;\r\n\r\n            if (typeof id === \"undefined\") {\r\n                //Auto-assign unique vertex ID if not given -- this assumes the caller\r\n                //has cleaned up the vertex data, or the polygon is simple enough not to\r\n                //suffer from numeric issues.\r\n                id = (this.contours.length + \":\" + i)\r\n            }\r\n\r\n            let idx = this.allPointsMap[id];\r\n            if (idx === undefined) {\r\n                idx = this.allPoints.length;\r\n                this.allPoints.push(v);\r\n                this.allPointsMap[id] = idx;\r\n\r\n                v2.set(v.x, v.y);\r\n                this.bbox.expandByPoint(v2);\r\n            }\r\n            cntr.push(idx);\r\n        });\r\n\r\n        if (area === 0 && skipZeroAreas)\r\n            return;\r\n\r\n        this.contours.push(cntr);\r\n        this.areas.push(area);\r\n    }\r\n\r\n    addContourSet(cset) {\r\n\r\n        //TODO: this can be optimized to skip this pre-processing\r\n\r\n        let cntr = cset.contours[0];\r\n        let pts = cset.allPoints;\r\n\r\n        let ptlist = cntr.map(idx => pts[idx]);\r\n\r\n        this.addContour(ptlist);\r\n    }\r\n\r\n\r\n    triangulate(customInsideChecker) {\r\n\r\n        if (this.polygon)\r\n            return;\r\n\r\n        let pts = this.allPoints;\r\n\r\n        let polygon = new ComplexPolygon(pts, customInsideChecker, this.bbox);\r\n\r\n        polygon.contours = this.contours;\r\n\r\n        polygon.triangulate();\r\n\r\n        this.polygon = polygon;\r\n        this.triangulationFailed = this.polygon.triangulationFailed;\r\n    }\r\n\r\n    area() {\r\n        return this.areas[0];\r\n    }\r\n\r\n    areaNet() {\r\n        let total = this.areas[0];\r\n        for (let i=1; i<this.areas.length; i++)\r\n            total -= this.areas[i];\r\n        return total;\r\n    }\r\n\r\n    perimeter() {\r\n\r\n        if (this.perimeterMem)\r\n            return this.perimeterMem;\r\n\r\n        let total = 0;\r\n        let pts = this.contours[0];\r\n        for (let i=0, len=pts.length-1; i<len; i++) {\r\n            let v1 = pts[i];\r\n            let v2 = pts[i+1];\r\n            total += Math.sqrt((v1.x - v2.x) * (v1.x - v2.x) + (v1.y - v2.y) * (v1.y - v2.y));\r\n        }\r\n\r\n        this.perimeterMem = total;\r\n\r\n        return total;\r\n    }\r\n\r\n\r\n    getThemeColor() {\r\n        //returns a stable random-ish color value\r\n        //based on properties of the geometry,\r\n        //for use during colorized visualization of areas and volumes\r\n\r\n        let r = ((this.areas[0] * 100) % 17) / 16;\r\n        let g = (this.allPoints.length % 23) / 22;\r\n        let b = ((this.perimeterMem * 100) % 29) / 28;\r\n\r\n        return { r: r, g: g, b: b };\r\n    }\r\n\r\n    hash() {\r\n        let all = [];\r\n        this.contours.forEach(c => {\r\n            let vids = c.map(idx => this.allPoints[idx].id);\r\n            if (vids[0] === vids[vids.length-1])\r\n                vids.pop(); //remove last point that equals first point, since the same closed contour can use any of its points as a start point\r\n            vids.sort();\r\n            all.push(vids);\r\n        });\r\n        return JSON.stringify(all);\r\n    }\r\n\r\n    \r\n    stitchContours() {\r\n\r\n        //invalidate this just in case something tries to use it...\r\n        //it makes no sense for open polylines anyway\r\n        this.areas = [];\r\n\r\n        let openCntrs = [];\r\n        for (var i=0; i<this.contours.length; i++) {\r\n            let cntr = this.contours[i];\r\n            if (cntr[0] !== cntr[cntr.length-1])\r\n                openCntrs.push(cntr);\r\n        }\r\n\r\n        if (!openCntrs.length)\r\n            return;\r\n\r\n\r\n        let didSomething = true;\r\n        while (didSomething) {\r\n\r\n            didSomething = false;\r\n\r\n            //Try to combine contours\r\n            let cntr_edge_table = {};\r\n            let contours = this.contours;\r\n\r\n            for (let i=0; i<contours.length; i++) {\r\n                let cntr = contours[i];\r\n\r\n                let start = cntr[0];\r\n                let end = cntr[cntr.length-1];\r\n\r\n                if (start === end)\r\n                    continue;\r\n\r\n                if (!cntr_edge_table[start])\r\n                    cntr_edge_table[start] = [-i-1];\r\n                else\r\n                    cntr_edge_table[start].push(-i-1);\r\n\r\n\r\n                if (!cntr_edge_table[end])\r\n                    cntr_edge_table[end] = [i];\r\n                else\r\n                    cntr_edge_table[end].push(i);\r\n            }\r\n\r\n            for (let p in cntr_edge_table) {\r\n                let entry = cntr_edge_table[p];\r\n\r\n                if (entry.length === 2) {\r\n                    let toerase = undefined;\r\n\r\n                    if (entry[0] < 0 && entry[1] < 0) {\r\n                        let c1 = -entry[0]-1; let c2 = -entry[1]-1;\r\n                        //join start point to startpoint\r\n                        contours[c2].shift();\r\n                        Array.prototype.push.apply(contours[c1].reverse(),contours[c2]);\r\n                        toerase = c2;\r\n                    }\r\n\r\n                    if (entry[0] < 0 && entry[1] > 0) {\r\n                        let c1 = -entry[0]-1; let c2 = entry[1];\r\n                        //join start point to endpoint\r\n                        contours[c2].pop();\r\n                        Array.prototype.push.apply(contours[c2], contours[c1]);\r\n                        toerase = c1;\r\n                    }\r\n\r\n                    if (entry[0] > 0 && entry[1] < 0) {\r\n                        let c1 = entry[0]; let c2 = -entry[1]-1;\r\n                        //join end point to startpoint\r\n                        contours[c1].pop();\r\n                        Array.prototype.push.apply(contours[c1], contours[c2]);\r\n                        toerase = c2;\r\n                    }\r\n\r\n                    if (entry[0] > 0 && entry[1] > 0) {\r\n                        let c1 = entry[0]; let c2 = entry[1];\r\n                        //join end point to endpoint\r\n                        contours[c1].pop();\r\n                        Array.prototype.push.apply(contours[c1], contours[c2].reverse());\r\n                        toerase = c2;\r\n                    }\r\n\r\n                    if (toerase !== undefined) {\r\n                        contours.splice(toerase, 1);\r\n                        didSomething = true;\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n   \r\n    }\r\n\r\n\r\n    containsPointFrom(cs2) {\r\n\r\n        //Only need to check a single point from the interior of the\r\n        //potential hole. Make sure it's inside the triangulation and not on the edge\r\n        //to avoid numeric noise.\r\n        if (!cs2.polygon.indices || cs2.polygon.indices.length < 3)\r\n            return false;\r\n\r\n        let p0 = cs2.allPoints[cs2.polygon.indices[0]];\r\n        let p1 = cs2.allPoints[cs2.polygon.indices[1]];\r\n        let p2 = cs2.allPoints[cs2.polygon.indices[2]];\r\n\r\n        let cx = (p0.x + p1.x + p2.x) / 3;\r\n        let cy = (p0.y + p1.y + p2.y) / 3;\r\n\r\n        return this.polygon && this.polygon.pointInPolygon(cx, cy);\r\n    }\r\n\r\n\r\n    //creates a vertex buffer containing a filled 2D polygon for visualization on the cut plane\r\n    //as 2D polygon mesh in the 3D model space\r\n    //TODO: Use this directly from the this.polygon\r\n    toPolygonMesh(packNormals) {\r\n\r\n        return this.polygon.toPolygonMesh(packNormals);\r\n\r\n    }\r\n\r\n    //creates an extruded polygon 3d mesh\r\n    //with the given thickness (maxZ=0, minZ=-thickness)\r\n    //TODO: Use this directly from the this.polygon\r\n    toExtrudedMesh(thickness) {\r\n\r\n        return this.polygon.toExtrudedMesh(thickness);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n","\r\nimport { isZero, TOL } from \"./fuzzy-math\";\r\n\r\nlet v1 = new THREE.Vector3();\r\n\r\nexport function xPlaneSegment(plane, pt0, pt1, res1, res2) {\r\n\r\n    let direction = v1.subVectors(pt1, pt0);\r\n\r\n    let denominator = plane.normal.dot( direction );\r\n\r\n    if ( isZero(denominator) ) {\r\n\r\n        res1.copy(pt0);\r\n        res2.copy(pt1);\r\n\r\n        // line is coplanar\r\n        return 2;\r\n    }\r\n\r\n    denominator = 1.0 / denominator;\r\n\r\n    let t = - ( pt0.dot( plane.normal ) * denominator + plane.constant * denominator);\r\n\r\n    if ( t < -TOL || t > 1 + TOL ) {\r\n\r\n        return 0;\r\n\r\n    }\r\n\r\n    let pt = direction.multiplyScalar( t ).add( pt0 );\r\n\r\n    res1.copy(pt);\r\n\r\n    return 1;\r\n}\r\n","\r\nexport const TOL = 1e-6;\r\n\r\nexport function isZero(f) {\r\n    return Math.abs(f) < TOL;\r\n}\r\n\r\nexport function isEqual(a, b) {\r\n    return isZero(a - b);\r\n}","\r\nconst INSIDE = 0; // 0000\r\nconst LEFT = 1;   // 0001\r\nconst RIGHT = 2;  // 0010\r\nconst BOTTOM = 4; // 0100\r\nconst TOP = 8;    // 1000\r\n\r\n// Compute the bit code for a point (x, y) using the clip rectangle\r\n// bounded diagonally by (xmin, ymin), and (xmax, ymax)\r\n\r\nfunction ComputeOutCode(x, y, xmin, ymin, xmax, ymax)\r\n{\r\n\tlet code;\r\n\r\n\tcode = INSIDE;          // initialised as being inside of [[clip window]]\r\n\r\n\tif (x < xmin)           // to the left of clip window\r\n\t\tcode |= LEFT;\r\n\telse if (x > xmax)      // to the right of clip window\r\n\t\tcode |= RIGHT;\r\n\tif (y < ymin)           // below the clip window\r\n\t\tcode |= BOTTOM;\r\n\telse if (y > ymax)      // above the clip window\r\n\t\tcode |= TOP;\r\n\r\n\treturn code;\r\n}\r\n\r\n// Cohen–Sutherland clipping algorithm clips a line from\r\n// P0 = (x0, y0) to P1 = (x1, y1) against a rectangle with\r\n// diagonal from (xmin, ymin) to (xmax, ymax).\r\nexport function xLineBox(x0, y0, x1, y1, xmin, ymin, xmax, ymax)\r\n{\r\n\t// compute outcodes for P0, P1, and whatever point lies outside the clip rectangle\r\n\tlet outcode0 = ComputeOutCode(x0, y0, xmin, ymin, xmax, ymax);\r\n\tlet outcode1 = ComputeOutCode(x1, y1, xmin, ymin, xmax, ymax);\r\n\tlet accept = false;\r\n\r\n\twhile (true) {\r\n\t\tif (!(outcode0 | outcode1)) {\r\n\t\t\t// bitwise OR is 0: both points inside window; trivially accept and exit loop\r\n\t\t\taccept = true;\r\n\t\t\tbreak;\r\n\t\t} else if (outcode0 & outcode1) {\r\n\t\t\t// bitwise AND is not 0: both points share an outside zone (LEFT, RIGHT, TOP,\r\n\t\t\t// or BOTTOM), so both must be outside window; exit loop (accept is false)\r\n\t\t\tbreak;\r\n\t\t} else {\r\n\t\t\t// failed both tests, so calculate the line segment to clip\r\n\t\t\t// from an outside point to an intersection with clip edge\r\n\t\t\tlet x, y;\r\n\r\n\t\t\t// At least one endpoint is outside the clip rectangle; pick it.\r\n\t\t\tlet outcodeOut = outcode0 ? outcode0 : outcode1;\r\n\r\n\t\t\t// Now find the intersection point;\r\n\t\t\t// use formulas:\r\n\t\t\t//   slope = (y1 - y0) / (x1 - x0)\r\n\t\t\t//   x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax\r\n\t\t\t//   y = y0 + slope * (xm - x0), where xm is xmin or xmax\r\n\t\t\t// No need to worry about divide-by-zero because, in each case, the\r\n\t\t\t// outcode bit being tested guarantees the denominator is non-zero\r\n\t\t\tif (outcodeOut & TOP) {           // point is above the clip window\r\n\t\t\t\tx = x0 + (x1 - x0) * (ymax - y0) / (y1 - y0);\r\n\t\t\t\ty = ymax;\r\n\t\t\t} else if (outcodeOut & BOTTOM) { // point is below the clip window\r\n\t\t\t\tx = x0 + (x1 - x0) * (ymin - y0) / (y1 - y0);\r\n\t\t\t\ty = ymin;\r\n\t\t\t} else if (outcodeOut & RIGHT) {  // point is to the right of clip window\r\n\t\t\t\ty = y0 + (y1 - y0) * (xmax - x0) / (x1 - x0);\r\n\t\t\t\tx = xmax;\r\n\t\t\t} else if (outcodeOut & LEFT) {   // point is to the left of clip window\r\n\t\t\t\ty = y0 + (y1 - y0) * (xmin - x0) / (x1 - x0);\r\n\t\t\t\tx = xmin;\r\n\t\t\t}\r\n\r\n\t\t\t// Now we move outside point to intersection point to clip\r\n\t\t\t// and get ready for next pass.\r\n\t\t\tif (outcodeOut === outcode0) {\r\n\t\t\t\tx0 = x;\r\n\t\t\t\ty0 = y;\r\n\t\t\t\toutcode0 = ComputeOutCode(x0, y0, xmin, ymin, xmax, ymax);\r\n\t\t\t} else {\r\n\t\t\t\tx1 = x;\r\n\t\t\t\ty1 = y;\r\n\t\t\t\toutcode1 = ComputeOutCode(x1, y1, xmin, ymin, xmax, ymax);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn accept;\r\n}\r\n\r\n","\r\nexport function xBoxBox(minx1, miny1, maxx1, maxy1,\r\n                 minx2, miny2, maxx2, maxy2) {\r\n\r\n    return ((minx1 <= maxx2)\r\n        && (miny1 <= maxy2)\r\n        && (maxx1 >= minx2)\r\n        && (maxy1 >= miny2));\r\n\r\n}\r\n","import { TOL } from \"./fuzzy-math\";\r\nimport { xPlaneSegment } from \"./x-plane-segment\";\r\n\r\nconst avp = Autodesk.Viewing.Private;\r\nconst logger = avp.logger;\r\n\r\nfunction Edge(pt1, pt2, id1From, id1To, id2From, id2To, meshId) {\r\n\r\n    this.v1 = pt1.clone();\r\n    this.v2 = pt2.clone();\r\n\r\n}\r\n\r\n\r\n\r\nlet res1 = new THREE.Vector3();\r\nlet res2 = new THREE.Vector3();\r\n\r\n// res is array containing result segments.\r\n// returns number of intersection point on the plane (0, 1, or 2) with the values of the points stored in the res array\r\nexport function xTrianglePlane(plane, pt0, pt1, pt2, i0, i1, i2, res, meshId) {\r\n\r\n    let d0 = plane.distanceToPoint(pt0);\r\n    let d1 = plane.distanceToPoint(pt1);\r\n    let d2 = plane.distanceToPoint(pt2);\r\n\r\n    // Check if all points are to one side of the plane\r\n    if (d0 < -TOL && d1 < -TOL && d2 < -TOL) {\r\n        return null;\r\n    }\r\n    if (d0 > TOL && d1 > TOL && d2 > TOL) {\r\n        return null;\r\n    }\r\n\r\n    let s0 = Math.sign(d0);\r\n    let s1 = Math.sign(d1);\r\n    let s2 = Math.sign(d2);\r\n\r\n    // Skip coplanar triangles (leave it to the neighbouring triangles to contribute their edges)\r\n    if (s0 === 0 && s1 === 0 && s2 === 0) {\r\n        return null;\r\n    }\r\n\r\n    let tmp1, tmp2;\r\n    let i1From, i1To, i2From, i2To;\r\n\r\n    //There is intersection, compute it\r\n    if (s0 !== s1) {\r\n        let numInts = xPlaneSegment(plane, pt0, pt1, res1, res2);\r\n        if (numInts === 2) {\r\n            res.push(new Edge(pt0, pt1, i0, i0, i1, i1, meshId));\r\n            return;\r\n        } else if (numInts === 1) {\r\n            i1From = i0;\r\n            i1To = i1;\r\n            tmp1 = res1.clone();\r\n        } else {\r\n            logger.warn(\"Unexpected zero intersections where at least one was expected\");\r\n        }\r\n    }\r\n\r\n    if (s1 !== s2) {\r\n        let numInts = xPlaneSegment(plane, pt1, pt2, res1, res2);\r\n        if (numInts === 2) {\r\n            res.push(new Edge(pt1, pt2, i1, i1, i2, i2, meshId));\r\n            return;\r\n        } else if (numInts === 1) {\r\n            if (tmp1) {\r\n                // Avoid the singular scenario where the signs are 0, -1 and +1\r\n                if (res1.distanceTo(tmp1) > TOL) {\r\n                    i2From = i1;\r\n                    i2To = i2;\r\n                    tmp2 = res1.clone();\r\n                }\r\n            }\r\n            else {\r\n                i1From = i1;\r\n                i1To = i2;\r\n                tmp1 = res1.clone();\r\n            }\r\n        } else {\r\n            logger.warn(\"Unexpected zero intersections where at least one was expected\");\r\n        }\r\n    }\r\n\r\n    if (s2 !== s0) {\r\n        let numInts = xPlaneSegment(plane, pt2, pt0, res1, res2);\r\n        if (numInts === 2) {\r\n            res.push(new Edge(pt2, pt0, i2, i2, i0, i0, meshId));\r\n            return;\r\n        } else if (numInts === 1) {\r\n            if (tmp1) {\r\n                // Avoid the singular scenario where the signs are 0, -1 and +1\r\n                if (res1.distanceTo(tmp1) > TOL) {\r\n                    i2From = i2;\r\n                    i2To = i0;\r\n                    tmp2 = res1.clone();\r\n                }\r\n            } else {\r\n                logger.warn(\"Unexpected single intersection point\");\r\n            }\r\n        } else {\r\n            logger.warn(\"Unexpected zero intersections where at least one was expected\");\r\n        }\r\n    }\r\n\r\n\r\n    if (tmp1 && tmp2) {\r\n        res.push(new Edge(tmp1, tmp2, i1From, i1To, i2From, i2To, meshId));\r\n    } else {\r\n        //logger.warn(\"Unexpected one intersection where two were expected\");\r\n    }\r\n\r\n}\r\n"],"sourceRoot":""}